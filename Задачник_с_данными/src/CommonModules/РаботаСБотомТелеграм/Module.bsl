#Область ОбработкаДокументаприЗаписи

Процедура ПриЗаписиДокумента(Источник, Отказ) Экспорт
	СтатусИзменен = Ложь;
	Статус = Источник.ТекущийСтатус;;
	ИсполнительИзменен = Ложь;
	
	Если Источник.ДополнительныеСвойства.Свойство("СтарыйСтатус") 
		И Источник.ДополнительныеСвойства.СтарыйСтатус <> Источник.ТекущийСтатус Тогда
		СтатусИзменен = Истина;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("СтарыйРеальныйИсполнитель") 
		И Источник.ДополнительныеСвойства.СтарыйРеальныйИсполнитель <> Источник.РеальныйИсполнитель Тогда
		ИсполнительИзменен = Истина;
	КонецЕсли;
	
	КомуОтправленоНовое = Новый Массив;
	Если СтатусИзменен Тогда
		Если Статус = Справочники.Статусы.Новое Тогда
			ТаблицаПользователей = ПолучитьПользовалетелей("УведомлятьОСозданииНовойЗадачи", Истина);
			Сообщение = "Создана новая задача №" + Источник.Номер + Символы.ПС + 
				"Автор: " + Источник.Автор + Символы.ПС + 
				"Заказчик: " + Источник.ОбращениеОт + Символы.ПС + 
				"Заголовок: " + Источник.Заголовок + Символы.ПС + 
				"Описание: " + Источник.Описание + Символы.ПС + 
				//"Объем часов: " + Источник.ОбъемЧасов + Символы.ПС + 
				//"Стоимость работ: " + Источник.СтоимостьРабот + Символы.ПС + 
				"Исполнитель: " + Источник.ТекущийИсполнитель + Символы.ПС + 
				"Реальный исполнитель: " + Источник.РеальныйИсполнитель + Символы.ПС;
				
			//Отправляем каждому пользователю
			Для Каждого ТекПользователь Из ТаблицаПользователей Цикл
				СформироватьЗапрос(ТекПользователь, Сообщение);
				КомуОтправленоНовое.Добавить(ТекПользователь.ФизЛицо);
			КонецЦикла;
			
			//Так же уведомим реального исполнителя
			СтруктураПоиска = Новый Структура("ФизЛицо", Источник.РеальныйИсполнитель);
			Если Источник.Автор <> Источник.РеальныйИсполнитель и НЕ ТаблицаПользователей.НайтиСтроки(СтруктураПоиска).Количество() Тогда
				СтруктураПользователя = НайтиСтруктуруПользователяПоФизЛицу(Источник.РеальныйИсполнитель);
				Если НЕ СтруктураПользователя = Неопределено Тогда
					СформироватьЗапрос(СтруктураПользователя, Сообщение);
					КомуОтправленоНовое.Добавить(Источник.РеальныйИсполнитель);
				КонецЕсли;
			КонецЕсли;
			
			//Так же уведомим исполнителя
			СтруктураПоиска = Новый Структура("ФизЛицо", Источник.ТекущийИсполнитель);
			Если Источник.Автор <> Источник.РеальныйИсполнитель и НЕ ТаблицаПользователей.НайтиСтроки(СтруктураПоиска).Количество() Тогда
				СтруктураПользователя = НайтиСтруктуруПользователяПоФизЛицу(Источник.ТекущийИсполнитель);
				Если НЕ СтруктураПользователя = Неопределено Тогда
					СформироватьЗапрос(СтруктураПользователя, Сообщение);
					КомуОтправленоНовое.Добавить(Источник.ТекущийИсполнитель);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТаблицаПользователей = ПолучитьПользовалетелей("УведомлятьОИзмененииСтатусаЗадачи", Истина);
			Сообщение = "Задача №" + Источник.Номер + " изменен статус: " + Символы.ПС + 
				"Заголовок: " + Источник.Заголовок + Символы.ПС + 
				"Старый статус: " + Источник.ДополнительныеСвойства.СтарыйСтатус + Символы.ПС + 
				"Новый статус: " + Статус + Символы.ПС + 
				"Изменил: " + ПараметрыСеанса.ТекущийПользователь.Наименование + Символы.ПС;
				
			//Отправляем каждому пользователю
			Для Каждого ТекПользователь Из ТаблицаПользователей Цикл
				СформироватьЗапрос(ТекПользователь, Сообщение);
			КонецЦикла;

		КонецЕсли;
			
		//Если Статус = Справочники.Статусы.НаСогласование Тогда
		//	//Согласование задачи у заказчика
		//	ОтветственныйОтдела = НайтиОтветственногоОтдела(Источник.ОбращениеОт);			
		//	СтруктураПользователя = НайтиСтруктуруПользователяПоФизЛицу(ОтветственныйОтдела);
		//	
		//	Запись = РегистрыСведений.ТелеграмЗадачиПодтверждения.СоздатьМенеджерЗаписи();
		//	Запись.ОбъектПодтверждения = Источник.Ссылка;
		//	Запись.Статус = Перечисления.СтатусыЗадачПодтвержденияТелеграм.ВОжидании;
		//	Запись.ФизЛицоПодтверждения = ОтветственныйОтдела;
		//	Запись.ИДПользователяПодтверждения = СтруктураПользователя.id;
		//	Запись.Записать(Истина);
		//КонецЕсли;
		
	КонецЕсли;
	
	Если ИсполнительИзменен И КомуОтправленоНовое.Найти(Источник.РеальныйИсполнитель) = Неопределено Тогда
		СтруктураПользователя = НайтиСтруктуруПользователяПоФизЛицу(Источник.РеальныйИсполнитель);
		Если НЕ СтруктураПользователя = Неопределено Тогда
			Сообщение = "Вы назначены исполнителем задачи №" + Источник.Номер + Символы.ПС + 
				"Заказчик: " + Источник.ОбращениеОт + Символы.ПС + 
				"Заголовок: " + Источник.Заголовок + Символы.ПС + 
				"Описание: " + Источник.Описание + Символы.ПС + 
				"Статус: " + Статус + Символы.ПС + 
				"Назначил: " + ПараметрыСеанса.ТекущийПользователь.Наименование + Символы.ПС;
				
			СформироватьЗапрос(СтруктураПользователя, Сообщение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПользовалетелей(РеквизитПоиска, Значение)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТелеграмПользователи.ИДПользователя КАК id,
	|	ТелеграмПользователи.ФизЛицо,
	|	ТелеграмПользователи.Имя КАК first_name,
	|	ТелеграмПользователи.Фамилия КАК last_name,
	|	ТелеграмПользователи.ЮзерНайм КАК username,
	|	ТелеграмПользователи.КодПодтверждения,
	|	ТелеграмПользователи.ДатаПоследнегоЗапроса,
	|	ТелеграмПользователи.КоличествоЗапросов,
	|	ТелеграмПользователи.ДатаСоздания,
	|	ТелеграмПользователи.Подтвержден,
	|	ТелеграмПользователи.УведомлятьОСозданииНовойЗадачи,
	|	ТелеграмПользователи.УведомлятьОСозданииНовогоПользователя,
	|	ТелеграмПользователи.УведомлятьОИзмененииСтатусаЗадачи
	|ИЗ
	|	РегистрСведений.ТелеграмПользователи КАК ТелеграмПользователи
	|ГДЕ
	|	ТелеграмПользователи.Подтвержден
	|	И ТелеграмПользователи." + РеквизитПоиска + " = &" + РеквизитПоиска;
	Запрос.УстановитьПараметр(РеквизитПоиска, Значение);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти

#Область ОбработкаРегЗадачи

Процедура ОбработкаЗапросовТелеграм() Экспорт
	ОбновитьПользователейЗадачНаПодтверждение();
	//Получаем обработку для отправки
	Обработка = Обработки.БотТелеграм.Создать();
	Обработка.ОбработкаЗапросов(Истина);
КонецПроцедуры

Процедура ОбновитьПользователейЗадачНаПодтверждение() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТелеграмЗадачиПодтверждения.ОбъектПодтверждения
	|ИЗ
	|	РегистрСведений.ТелеграмЗадачиПодтверждения КАК ТелеграмЗадачиПодтверждения
	|ГДЕ
	|	ТелеграмЗадачиПодтверждения.ФизЛицоПодтверждения = &ФизЛицоПодтверждения
	|	И ТелеграмЗадачиПодтверждения.ИДПользователяПодтверждения = &ИДПользователяПодтверждения";
	Запрос.УстановитьПараметр("ФизЛицоПодтверждения", Справочники.ФизическиеЛица.ПустаяСсылка());
	Запрос.УстановитьПараметр("ИДПользователяПодтверждения", "");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		//Согласование задачи у заказчика
		ОтветственныйОтдела = НайтиОтветственногоОтдела(Выборка.ОбъектПодтверждения.ОбращениеОт);			
		СтруктураПользователя = НайтиСтруктуруПользователяПоФизЛицу(ОтветственныйОтдела);
		
		Если ЗначениеЗаполнено(ОтветственныйОтдела) И 
			НЕ СтруктураПользователя = Неопределено И ЗначениеЗаполнено(СтруктураПользователя.id) тогда
			Запись = РегистрыСведений.ТелеграмЗадачиПодтверждения.СоздатьМенеджерЗаписи();
			Запись.ОбъектПодтверждения = Выборка.ОбъектПодтверждения;
			Запись.Статус = Перечисления.СтатусыЗадачПодтвержденияТелеграм.ВОжидании;
			Запись.ФизЛицоПодтверждения = ОтветственныйОтдела;
			Запись.ИДПользователяПодтверждения = СтруктураПользователя.id;
			Запись.Записать(Истина);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ОчисткаИсторииЗапросовТелеграма() Экспорт
	ДатаПредел = НачалоДня(ТекущаяДата() - 3 * 86400);
	
	Набор = РегистрыСведений.ТелеграмЗапросы.СоздатьНаборЗаписей();
	Набор.Прочитать();
	
	Для Каждого Запись Из Набор Цикл
		Если Запись.Обработан И Запись.date < ДатаПредел Тогда
			Набор.Удалить(Запись);
		КонецЕсли;
	КонецЦикла;
	
	Набор.Записать(Истина);
КонецПроцедуры

#КонецОбласти	

#Область ДопФункционал
Процедура РегистрацияНовогоПользователяТелеграма(ИДПользователя, Имя, Фамилия, ЮзерНайм, КодПодтверждения) Экспорт
	ТаблицаПользователей = ПолучитьПользовалетелей("УведомлятьОСозданииНовогоПользователя", Истина);
	Сообщение = "Попытка авторизации нового пользователя:" + Символы.ПС + 
		"ID: " + ИДПользователя + Символы.ПС + 
		"Имя: " + Имя + Символы.ПС + 
		"Фамилия: " + Фамилия + Символы.ПС + 
		"User name: " + ЮзерНайм + Символы.ПС + 
		"Код подтверждения: " + КодПодтверждения;
		
	//Структура сообщения
	СтруктураСообщения = Новый Структура;
	СтруктураСообщения.Вставить("text", Сообщение);
	СтруктураСообщения.Вставить("chat_id");
	
	//Получаем обработку для отправки
	Обработка = Обработки.БотТелеграм.Создать();
	Обработка.ПрочитатьНастройки();
	
	//Отправляем каждому пользователю
	Для Каждого ТекПользователь Из ТаблицаПользователей Цикл
		СтруктураСообщения.chat_id = ТекПользователь.ИДПользователя;
		Обработка.ОтправитьСообщение(СтруктураСообщения, Истина);
	КонецЦикла;
КонецПроцедуры
	
Функция НайтиСтруктуруПользователяПоФизЛицу(ФизЛицо);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТелеграмПользователи.ИДПользователя КАК id,
	|	ТелеграмПользователи.Имя КАК first_name,
	|	ТелеграмПользователи.Фамилия КАК last_name,
	|	ТелеграмПользователи.ЮзерНайм КАК username
	|ИЗ
	|	РегистрСведений.ТелеграмПользователи КАК ТелеграмПользователи
	|ГДЕ
	|	ТелеграмПользователи.Подтвержден
	|	И ТелеграмПользователи.ФизЛицо = &ФизЛицо";
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НайтиОтветственногоОтдела(Отдел)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОтделов.Сотрудник
	|ИЗ
	|	РегистрСведений.СотрудникиОтделов КАК СотрудникиОтделов
	|ГДЕ
	|	СотрудникиОтделов.Ответственный
	|	И СотрудникиОтделов.Отдел = &Отдел";
	Запрос.УстановитьПараметр("Отдел", Отдел);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Сотрудник;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НайтиОтделПоОтветственному(Сотрудник) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОтделов.Отдел
	|ИЗ
	|	РегистрСведений.СотрудникиОтделов КАК СотрудникиОтделов
	|ГДЕ
	|	СотрудникиОтделов.Ответственный
	|	И СотрудникиОтделов.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Отдел;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура СформироватьЗапрос(Данные, Текст)
	Запрос = РегистрыСведений.ТелеграмЗапросы.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запрос, Данные);
	Запрос.text = Текст;
	Запрос.ПроизвольныйЗапрос = Истина;
	Запрос.date = ТекущаяДата();
	Запрос.Записать(Истина);
КонецПроцедуры

#КонецОбласти