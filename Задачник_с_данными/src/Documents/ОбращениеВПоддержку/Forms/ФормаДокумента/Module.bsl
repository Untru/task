
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если Параметры.Ключ.Пустая() Тогда // если новый док.
	//	Отказ = Истина;
	//	ОткрытьФорму("Документ.ОбращениеВПоддержку.Форма.ФормаВводаНового",,ЭтаФорма.ВладелецФормы);
	//КонецЕсли;
		
	//// если не заполнены поля Обращения от и Отдел исполнитель то откроем форму ввода нового
	//Если НЕ Отказ Тогда
	//	Если НЕ ЗначениеЗаполнено(Объект.ОбращениеОт) ИЛИ НЕ ЗначениеЗаполнено(Объект.ТекущаяКатегория) Тогда
	//		Отказ = Истина;
	//		П = Новый Структура("Ключ", Объект.Ссылка);
	//		ОткрытьФорму("Документ.ОбращениеВПоддержку.Форма.ФормаВводаНового",П,ЭтаФорма.ВладелецФормы);
	//	КонецЕсли;	
	//КонецЕсли;
	ТекПольз = ОбщийМодульСервер.ТекущийПользователь();
	ТипОбращений = ОбщийМодульСервер.ПолучитьНастройкиПользователя(ТекПольз,"ТипПрименяемыхОбращений");
	Отдел = ОбщийМодульСервер.ПолучитьНастройкиПользователя(ТекПольз,"ОтделПоУмолчанию");
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбращениеОт) Тогда 
			Объект.ОбращениеОт = Отдел;
	Иначе
		Если ТипЗнч(Объект.ОбращениеОт) = Тип("СправочникСсылка.Отделы") Тогда
			ВидОбращения = ОбщийМодульСервер.ПолучитьВидыОбращений("Внутренние");
		Иначе
			ВидОбращения = ОбщийМодульСервер.ПолучитьВидыОбращений("Внешние");
		КонецЕсли	
	КонецЕсли;
	Если не ЗначениеЗаполнено(Объект.ТекущаяКатегория) Тогда 
		Объект.ТекущаяКатегория =  ОбщийМодульСервер.ПолучитьНастройкиПользователя(ТекПольз,"КатегорияПоУмолчанию");
		
	КонецЕсли;		 
	Если не ЗначениеЗаполнено(Объект.ТекущийОтделИсполнитель) Тогда 
		Объект.ТекущийОтделИсполнитель =  ОбщийМодульСервер.ПолучитьНастройкиПользователя(ТекПольз,"ОтделПоУмолчанию");
		
	КонецЕсли;	
	
	//Если НЕ Параметры.Ключ.Пустая() Тогда // если не новый док.
	//	 Элементы.Файлы.Видимость = Ложь
	// КонецЕсли;	
	// 
	Если не ЗначениеЗаполнено(Объект.ТекущийОтделИсполнитель) Тогда 
		     Объект.ТекущийИсполнитель =  ОбщийМодульСервер.ПолучитьНастройкиПользователя(ТекПольз,"ИсполнительПоУмолчанию");
			 
	КонецЕсли;		 


	// ВыполнитьДо
	Если Объект.ВыполнитьДо<=ТекущаяДата() Тогда
		Элементы.ВыполнитьДо.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;	
	Элементы.ВыполнитьДо.ТолькоПросмотр = НЕ Объект.ФиксироватьДатуВыполнения;
	
	//Отобразить Контакты
	ЭтаФорма.СтрокаКонтакты = Объект.КонтактноеЛицо+?(ЗначениеЗаполнено(Объект.Телефон),"   тел: "+Объект.Телефон,"");
	Элементы.ДанныеДляКлиента.Видимость	  = не	ЕстьЛиПравоИсполнитель();
	Элементы.ДанныеПрограммиста.Видимость = 	ЕстьЛиПравоИсполнитель();
	Если не Элементы.ДанныеПрограммиста.Видимость Тогда
	Элементы.ДанныеПрограммиста.Видимость = 	ЕстьЛиПравоПолныеПрава();
	КонецЕсли;

	ПредИсполнитель = Объект.ТекущийИсполнитель;
	
	ПланированиеЗадач.ПроверитьКорректностьПериодизации(Объект,  "ДетализированыйПланВыполнения", Истина);
	ОбновитьЗаголовки();
КонецПроцедуры

&НаСервере
Функция  ЕстьЛиПравоИсполнитель()
Возврат 	РольДоступна("ИсполнениеОбращений");
КонецФункции	

&НаСервере
Функция  ЕстьЛиПравоПолныеПрава()
Возврат 	РольДоступна("ПолныеПрава");
КонецФункции	

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияФормыВопроса(РезультатЗакрытия,ДопПараметры) Экспорт
	Если НЕ ДопПараметры.Количество() = 0 Тогда
		Если ДопПараметры.ОтветНаВопрос = "Да" Тогда
			Объект.Решение = "";
		КонецЕсли;	
    КонецЕсли;
КонецПроцедуры
 
&НаКлиенте
Процедура ВыполнитьПослеЗакрытияФормы(РезультатЗакрытия,ДопПараметры) Экспорт
	 ВыполнитьПослеЗакрытияФормыНаСервере(ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПослеЗакрытияФормыНаСервере(ДопПараметры) 
Если НЕ ДопПараметры.Количество() = 0 Тогда
		Если ДопПараметры.РежимДобавления = "Статус" Тогда
			НоваяСтрока = Объект.Статусы.Вставить(0);	
			НоваяСтрока.Дата = ТекущаяДата();
			НоваяСтрока.Статус = ДопПараметры.Статус;
			НоваяСтрока.Добавил = ПараметрыСеанса.ТекущийПользователь.Сотрудник;
			Объект.ТекущийСтатус = ДопПараметры.Статус;
			Если НЕ Объект.ФиксироватьДатуВыполнения Тогда // если дата выполнения не задана в ручную, тогда менять автоматически
				Если ДопПараметры.Статус.КоличествоЧасовВыполнения > 0 Тогда
					Объект.ВыполнитьДо = НоваяСтрока.Дата+(ДопПараметры.Статус.КоличествоЧасовВыполнения*3600);
				Иначе
					Объект.ВыполнитьДо = '00010101';
				КонецЕсли;
			КонецЕсли;
			// Добавим сообщение если оно введено
			Если ЗначениеЗаполнено(ДопПараметры.Сообщение) Тогда
				НоваяСтрока = Объект.Сообщения.Вставить(0);	
				НоваяСтрока.Дата = ТекущаяДата();
				НоваяСтрока.Сообщение = ДопПараметры.Сообщение;
				НоваяСтрока.ЯвляетсяРешением = ДопПараметры.ЯвляетсяРешением;
				НоваяСтрока.Добавил = ПараметрыСеанса.ТекущийПользователь.Сотрудник;
				Если ДопПараметры.ЯвляетсяРешением тогда
					Объект.Решение = ДопПараметры.Сообщение;
				КонецЕсли;	
			КонецЕсли;	
			ПараметрыПисьма = Новый Структура;
			ПараметрыПисьма.Вставить("Кому",Объект.Автор.АдресЭлектроннойПочты );
			ПараметрыПисьма.Вставить("Тема", "Новый статус у заявки "+Объект.Заголовок+" "+ Объект.ТекущийСтатус);
			ПараметрыПисьма.Вставить("Тело", "Новый статус у заявки №"+Объект.Номер+" "+Объект.Заголовок+" "+ Объект.ТекущийСтатус);

			// отправим письмо автору
			//РаботаСЭлектроннойПочтой.ОтправитьСообщение(Константы.ОтправкаОбращенийУчетнаяЗаписьПочты.Получить(),ПараметрыПисьма);
		ИначеЕсли ДопПараметры.РежимДобавления = "Сообщение" Тогда
			НоваяСтрока = Объект.Сообщения.Вставить(0);	
			НоваяСтрока.Дата = ТекущаяДата();
			НоваяСтрока.Сообщение = ДопПараметры.Сообщение;
			НоваяСтрока.ЯвляетсяРешением = ДопПараметры.ЯвляетсяРешением;
			НоваяСтрока.Добавил = ПараметрыСеанса.ТекущийПользователь.Сотрудник;
			Если ДопПараметры.ЯвляетсяРешением тогда
				Объект.Решение = ДопПараметры.Сообщение;
			КонецЕсли;
		ИначеЕсли ДопПараметры.РежимДобавления = "Исполнитель" Тогда	
			НоваяСтрока = Объект.Исполнители.Вставить(0);	
			НоваяСтрока.Дата = ТекущаяДата();
			НоваяСтрока.Категория = ДопПараметры.Категория;
			НоваяСтрока.Отдел = ДопПараметры.Отдел;
			НоваяСтрока.Исполнитель = ДопПараметры.Исполнитель;
			НоваяСтрока.Добавил = ПараметрыСеанса.ТекущийПользователь.Сотрудник;
			Объект.ТекущаяКатегория = ДопПараметры.Категория;
			Объект.ТекущийОтделИсполнитель = ДопПараметры.Отдел;
			Объект.ТекущийИсполнитель = ДопПараметры.Исполнитель;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СтатусыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ДопПараметры = Новый Структура;
	ОповещениеЗакрытия = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормы", ЭтаФорма,ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаДобавленияСтатуса",,ЭтаФорма,,,,ОповещениеЗакрытия);
КонецПроцедуры

&НаКлиенте
Процедура СтатусыПередУдалением(Элемент, Отказ)
Если не  ЕстьЛиПравоПолныеПрава() Тогда	
	ВремяУдаленияВМинутах = ОбщийМодульСервер.ПолучитьКонстантыВремениУдаленияЗаписей("ВремяУдаленияЗаписиОСтатусе");
	Если НЕ ВремяУдаленияВМинутах=0 Тогда 
		Если (Элемент.ТекущиеДанные.Дата+ВремяУдаленияВМинутах*60) < ТекущаяДата() Тогда
			Отказ = Истина;
			Сообщить("Нельзя удалять статус введенный более "+ ВремяУдаленияВМинутах +" минут назад");
		КонецЕсли;	
	КонецЕсли;
КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СтатусыПередНачаломИзменения(Элемент, Отказ)
	//ПараметрыСеанса.ТекущийПользователь.
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СтатусыПослеУдаления(Элемент)
	ДатаВыполненияОбновлена = Ложь;
	КоличествоСтрокСтатусы = Объект.Статусы.Количество();
	Если КоличествоСтрокСтатусы>0 Тогда
		Объект.ТекущийСтатус = Объект.Статусы.Получить(0).Статус;
		УтановитьВыполнитьДоНаСервере();
	Иначе
		Объект.ТекущийСтатус = Объект.ТекущийСтатус.Пустая();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УтановитьВыполнитьДоНаСервере()
	Если НЕ Объект.ФиксироватьДатуВыполнения Тогда // если дата выполнения не задана в ручную, тогда менять автоматически
		Если Объект.ТекущийСтатус.КоличествоЧасовВыполнения > 0 Тогда
			Объект.ВыполнитьДо = Объект.Статусы.Получить(0).Дата+(Объект.ТекущийСтатус.КоличествоЧасовВыполнения*3600);
		Иначе
			Объект.ВыполнитьДо = '00010101';
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СообщенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ДопПараметры = Новый Структура;
	ОповещениеЗакрытия = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормы", ЭтаФорма,ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаДобавленияСообщения",,ЭтаФорма,,,,ОповещениеЗакрытия);
КонецПроцедуры

&НаКлиенте
Процедура СообщенияПередУдалением(Элемент, Отказ)
	
	//ВремяУдаленияВМинутах = ОбщийМодульСервер.ПолучитьКонстантыВремениУдаленияЗаписей("ВремяУдаленияЗаписиОСообщении");
	//Если НЕ ВремяУдаленияВМинутах=0 Тогда 
	//	Если (Элемент.ТекущиеДанные.Дата+ВремяУдаленияВМинутах*60) < ТекущаяДата() Тогда
	//		Отказ = Истина;
	//		Сообщить("Нельзя удалять сообщение введенное более "+ ВремяУдаленияВМинутах +" минут назад");
	//	КонецЕсли;
	//КонецЕсли; 
	
	Продолжать = Ложь;
	Пароль = 0;
	Если ВвестиЧисло(Пароль, "Введите пароль", 10, 0) Тогда
		Если Пароль = 222333 Тогда
			Продолжать = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если Не Продолжать Тогда
		Отказ = Истина;
	КонецЕсли;	

	
	Если Не Отказ Тогда
		Если Элемент.ТекущиеДанные.ЯвляетсяРешением Тогда
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ТекстВопроса","Данное сообщение являлось решением. Очистить поле решение?");
			ДопПараметры.Вставить("ТекстЗаголовка","Очистить решение...");
			ОповещениеЗакрытия = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормыВопроса", ЭтаФорма,ДопПараметры);
			ОткрытьФорму("ОбщаяФорма.ФормаВопроса",,ЭтаФорма,,,,ОповещениеЗакрытия);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СообщенияПередНачаломИзменения(Элемент, Отказ)
	ВремяУдаленияВМинутах = ОбщийМодульСервер.ПолучитьКонстантыВремениУдаленияЗаписей("ВремяУдаленияЗаписиОСообщении");
	Если (Элемент.ТекущиеДанные.Дата+ВремяУдаленияВМинутах*60) < ТекущаяДата() Тогда
		  Отказ = Истина;
		  Сообщить("Нельзя изменять сообщение введенное более "+ ВремяУдаленияВМинутах +" минут назад");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ДопПараметры = Новый Структура;
	ОповещениеЗакрытия = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормы", ЭтаФорма,ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаДобавленияКатегорииИсполнителя",,ЭтаФорма,,,,ОповещениеЗакрытия);
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередУдалением(Элемент, Отказ)
	ВремяУдаленияВМинутах = ОбщийМодульСервер.ПолучитьКонстантыВремениУдаленияЗаписей("ВремяУдаленияЗаписиОбИсполнителе");
	Если НЕ ВремяУдаленияВМинутах=0 Тогда 
		Если (Элемент.ТекущиеДанные.Дата+ВремяУдаленияВМинутах*60) < ТекущаяДата() Тогда
			Отказ = Истина;
			Сообщить("Нельзя удалять запись о категории и исполнителе введенную более "+ ВремяУдаленияВМинутах +" минут назад");
		КонецЕсли;	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	КоличествоСтрок = Объект.Исполнители.Количество();
	Если КоличествоСтрок>0 Тогда
		Объект.ТекущийОтделИсполнитель = Объект.Исполнители.Получить(0).Отдел;
		Объект.ТекущийИсполнитель = Объект.Исполнители.Получить(0).Исполнитель;
		Объект.ТекущаяКатегория = Объект.Исполнители.Получить(0).Категория;
	Иначе
		Объект.ТекущийОтделИсполнитель = Объект.ТекущийОтделИсполнитель.Пустая();
		Объект.ТекущийИсполнитель =  Объект.ТекущийИсполнитель.Пустая();
		Объект.ТекущаяКатегория =  Объект.ТекущаяКатегория.Пустая();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепленныеФайлы(Команда)
	ПараметрыФормы = Новый Структура; 
    ПараметрыФормы.Вставить("ВладелецФайла", Объект.Ссылка);
    ОткрытьФорму("РегистрСведений.ПрисоединенныеФайлы.Форма.ФормаПросмотраФайлов",ПараметрыФормы ,ЭтаФорма , ) ;
КонецПроцедуры

&НаКлиенте
Процедура ФиксироватьДатуВыполненияПриИзменении(Элемент)
	Элементы.ВыполнитьДо.ТолькоПросмотр = НЕ Объект.ФиксироватьДатуВыполнения;
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРаботу(Команда)
	
	НачатьЗакончитьРаботу();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРаботу(Команда)
	НачатьЗакончитьРаботу();
	Записать();
КонецПроцедуры

&НаСервере
Процедура НачатьЗакончитьРаботу()
	
	Начать = Истина;
	
	Для Каждого Стр из Объект.УчетРабочегоВремени Цикл
		Если ЗначениеЗаполнено(Стр.ДатаНачалаФакт) и Не ЗначениеЗаполнено(Стр.ДатаОкончанияФакт) Тогда
			Начать = Ложь;
			Стр.ДатаОкончанияФакт = ТекущаяДата();
		КонецЕсли;	
	КонецЦикла;	
	
	Если Начать Тогда
		НС = Объект.УчетРабочегоВремени.Добавить();
		НС.ДатаНачалаФакт = ТекущаяДата();		
	КонецЕсли;	
	
	
КонецПроцедуры	

&НаСервере
Процедура РассчитатьЧасыНаСервере()
	
	ИтогоСекунд = 0;
	Для Каждого Стр из Объект.УчетРабочегоВремени Цикл
		Если ЗначениеЗаполнено(Стр.ДатаНачалаФакт) и ЗначениеЗаполнено(Стр.ДатаОкончанияФакт) Тогда
			ИтогоСекунд = ИтогоСекунд + (Стр.ДатаОкончанияФакт - Стр.ДатаНачалаФакт);
		КонецЕсли;	
	КонецЦикла;	
	
	Сообщить(ИтогоСекунд/60/60);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЧасы(Команда)
	РассчитатьЧасыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ИтогоСекунд = 0;
	Для Каждого Стр из Объект.УчетРабочегоВремени Цикл
		Если ЗначениеЗаполнено(Стр.ДатаНачалаФакт) и ЗначениеЗаполнено(Стр.ДатаОкончанияФакт) Тогда
			ИтогоСекунд = ИтогоСекунд + (Стр.ДатаОкончанияФакт - Стр.ДатаНачалаФакт);
		КонецЕсли;	
	КонецЦикла;	
	
	Объект.ОбщееВремяФакт = ИтогоСекунд/60/60;

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьНаСервере();
	ОбновитьСтоимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	// Вставить содержимое обработчика.
	Записать();	
	#Если ВебКлиент Тогда 
		НесинхронноУстановитьПриложенияДляРаботыСФайламиИНачатьРаботатьСФайлами();
	#Иначе
		НачатьРаботатьНепосредственноСФайлом();
	#КонецЕсли

	ОбновитьЗаголовки();
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ТекущийОбъект.ЭтоНовый() Тогда
		АдресДанныхЗаказа = ПоместитьВоВременноеХранилище(
		ТекущийОбъект.ВложенныеФайлы.Выгрузить(),
		УникальныйИдентификатор);
		Если не ЗначениеЗаполнено(ТекущийОбъект.ТекущийСтатус) Тогда 
			СтатусНовая = Справочники.Статусы.Новое;
			ТекПольз = ОбщийМодульСервер.ТекущийПользователь();
			ТекущийОбъект.Автор = ТекПольз.Сотрудник;
			ТекущийОбъект.ТекущийСтатус =СтатусНовая;
			//Добавить статусы
			НоваяСтрока = ТекущийОбъект.Статусы.Добавить();
			НоваяСтрока.Дата = ТекущаяДата();
			НоваяСтрока.Статус = СтатусНовая;
			НоваяСтрока.Добавил = ТекПольз.Сотрудник;
		КонецЕсли;
		
	КонецЕсли;

	ТаблицаЗначений = ПолучитьИзВременногоХранилища(АдресДанныхЗаказа);
	ТекущийОбъект.ВложенныеФайлы.Загрузить(ТаблицаЗначений);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	АдресДанныхЗаказа = ПоместитьВоВременноеХранилище(
			ТекущийОбъект.ВложенныеФайлы.Выгрузить(),
			УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайл(Команда)
	ОповещениеВопроса = Новый ОписаниеОповещения("УдалитьФайлНаКлиенте", ЭтотОбъект) ;
	ПоказатьВопрос(ОповещениеВопроса, "Удалить этот файл из базы безвозвратно?", РежимДиалогаВопрос.ДаНет, 10, КодВозвратаДиалога.Нет, "Удаление") ;
	ОбновитьЗаголовки();
КонецПроцедуры

&НаКлиенте
Процедура ПланПриИзменении(Элемент)
	ОчиститьСообщения();
	ОбновитьПланирование("ДетализированыйПланВыполнения");
	ОбновитьПланирование("РеальныйПланВыполнения");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПланПриИзменении(Элемент) 
	
	Если Не ЗначениеЗаполнено(объект.прогДатаНачалаПлан) Тогда
		объект.прогДатаНачалаПлан = объект.ДатаНачалаПлан;
	КонецЕсли;
	
	ПланПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПланПриИзменении(Элемент) 
	
	Если Не ЗначениеЗаполнено(объект.прогДатаОкончанияПлан) Тогда
		объект.прогДатаОкончанияПлан = объект.ДатаОкончанияПлан;
	КонецЕсли;
	
	ПланПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланВыполненияПриИзмененииСтроки(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОчиститьСообщения();
	ОбновитьПланирование(Элемент.Имя, Ложь);
КонецПроцедуры

&НаСервере
Процедура ОбновитьПланирование(ИмяТабЧасти, ИзмененаШапка=Истина)
	Если ИзмененаШапка Тогда
		ПланированиеЗадач.ИзменитьДетальноеПланированиеПриИзмененииШапки(Объект,  ИмяТабЧасти,, НЕ ИмяТабЧасти = "РеальныйПланВыполнения");
	ИначеЕсли НЕ ИмяТабЧасти = "РеальныйПланВыполнения" Тогда
		ПланированиеЗадач.ИзменитьДетальноеПланированиеПриИзмененииТаблицы(Объект);
	КонецЕсли;
	
	Корректно = ПланированиеЗадач.ПроверитьКорректностьПериодизации(Объект,  ИмяТабЧасти, Истина);
	
	Если Не Корректно Тогда
		Сообщить("Не верный порядок периодизации планирования!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланВыполненияПриИзменении(Элемент)
	Если НЕ Элемент.Имя = "РеальныйПланВыполнения" Тогда
		ПланированиеЗадач.ИзменитьДетальноеПланированиеПриИзмененииТаблицы(Объект);
	КонецЕсли;
	
	ПланированиеЗадач.ПроверитьКорректностьПериодизации(Объект, Элемент.Имя, Истина);
КонецПроцедуры

//ДОБАВЛЕНИЕ ФАЙЛОВ =======================================

&НаКлиенте
Процедура НачатьРаботатьНепосредственноСФайлом()
	ИмяФайла = "";
	Адрес = "";
	ОповещениеВыбораФайла = Новый ОписаниеОповещения("ЗаписатьДвоичныеДанныеВРеквизитТЧ",ЭтотОбъект) ;

	НачатьПомещениеФайла(ОповещениеВыбораФайла, Адрес, ИмяФайла, Истина); 	
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДвоичныеДанныеВРеквизитТЧ(Результат,СсылкаНаВременноеХранилище,ИмяДляПредставления,ДополнительныеПараметры) Экспорт
	ЗаписатьДвоичныеДанныеВРеквизитТЧНаСервере(Результат,СсылкаНаВременноеХранилище,ИмяДляПредставления,ДополнительныеПараметры);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДвоичныеДанныеВРеквизитТЧНаСервере(Результат,СсылкаНаВременноеХранилище,ИмяДляПредставления,ДополнительныеПараметры) Экспорт
	
	Если не Результат Тогда
		Возврат;
	КонецЕсли;
	
		
	ДД = ПолучитьИзВременногоХранилища(СсылкаНаВременноеХранилище);
	ИмяДляПредставления = ПолучитьИмяФайлаИзПолногоПути(ИмяДляПредставления);

	об = РеквизитФормыВЗначение("Объект");
	НовСтр = об.вложенныеФайлы.добавить();
	Новстр.ВложенныйФайл = Новый ХранилищеЗначения(ДД,новый СжатиеДанных(9));
	Новстр.ПредставлениеФайла = ИмяДляПредставления;
	ЗначениеВРеквизитФормы(об,"Объект");
	
	ТаблицаЗначений = ПолучитьИзВременногоХранилища(АдресДанныхЗаказа);
	НовСтрСДанными = ТаблицаЗначений.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтрСДанными,НовСтр);
	АдресДанныхЗаказа = ПоместитьВоВременноеХранилище(ТаблицаЗначений,УникальныйИдентификатор);
	
КонецПроцедуры

Функция ПолучитьИмяФайлаИзПолногоПути(ПолныйПуть)
	
	ИсхСтрока = ПолныйПуть;
	Поз = Найти(ИсхСтрока, "\");
	ПозК = 0;
	Пока Поз <> 0 Цикл
	  ПозК = ПозК + Поз;
	  ИсхСтрока = Сред(ИсхСтрока, Поз+1);
	  Поз = Найти(ИсхСтрока, "\");
	КонецЦикла;    
	ИмяФайла = Сред(ПолныйПуть, ПозК + 1);
	Возврат ИмяФайла;
	
КонецФункции


//СОХРАНЕНИЕ ФАЙЛОВ НА ДИСК=================================== 
&НаКлиенте
Процедура ВложенныеФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//я так и не понял, какой смысл несет "выбранная строка", но это ни разу не номер строки, ни ее индекс и вообще откуда берется ХЗ.
	
	ДопПараметры = Новый Структура("ЭтоУжеВтораяПопытка,ЗапускатьДиалогВыбораДАИлиСохраненияНет",Ложь,Ложь);
	ОповещениеЗавершенияПодключенияРасширенияРаботыСФайлами = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДопПараметры) ;
	НачатьПодключениеРасширенияРаботыСФайлами(ОповещениеЗавершенияПодключенияРасширенияРаботыСФайлами);
	 
КонецПроцедуры

&НаКлиенте
Процедура НачатьСохранениеФайла()
	
	НомерСтроки = ЭтотОбъект.Элементы.ВложенныеФайлы.текущиеДанные.НомерСтроки;
	
	СтруктураРезультата = ПолучитьДвоичныеДанныеИзТаблицыЗначенийНаСервере(АдресДанныхЗаказа,НомерСтроки-1);//-1 т.к. получаем по индексу
		
	Если Не ЗначениеЗаполнено(СтруктураРезультата.ДанныеДляСохранения) Тогда
		Сообщить("Данных для сохранения не обнаружено");
		Возврат;
	КонецЕсли;
		
	АдресВХ = ПоместитьВоВременноеХранилище(СтруктураРезультата.ДанныеДляСохранения);
	ПолучитьФайл(АдресВХ, СтруктураРезультата.ПредставлениеФайла, Истина);

КонецПроцедуры

&НаСервере
Функция ПолучитьДвоичныеДанныеИзтаблицыЗначенийнаСервере(Адрес,ИндексСтроки)
	
	ТаблицаЗначений = ПолучитьИзВременногоХранилища(АдресДанныхЗаказа);
	
	ПолученнаяСтрока = ТаблицаЗначений.Получить(ИндексСтроки);
		
	Возврат Новый Структура("ДанныеДляСохранения,ПредставлениеФайла",ПолученнаяСтрока.ВложенныйФайл.Получить(),ПолученнаяСтрока.ПредставлениеФайла);

КонецФункции
//=============================================================


//УДАЛЕНИЕ ФАЙЛОВ ИЗ БАЗЫ =====================================

&НаКлиенте
Процедура УдалитьФайлНаКлиенте(РезультатВопроса,ДополнительныеПараметры)   экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
	УдалитьФайлНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьФайлНаСервере()
		
	НомерУдаляемойСтроки = ЭтаФорма.Элементы.ВложенныеФайлы.ТекущаяСтрока;
	
	об = РеквизитФормыВЗначение("Объект");
	об.вложенныеФайлы.удалить(НомерУдаляемойСтроки);
	ЗначениеВРеквизитФормы(об,"Объект");
	
	ТаблицаЗначений = ПолучитьИзВременногоХранилища(АдресДанныхЗаказа);
	ТаблицаЗначений.Удалить(НомерУдаляемойСтроки);
	АдресДанныхЗаказа = ПоместитьВоВременноеХранилище(ТаблицаЗначений,УникальныйИдентификатор);

КонецПроцедуры

&наКлиенте
Функция НесинхронноУстановитьПриложенияДляРаботыСФайламиИНачатьРаботатьСФайлами() 
	ДопПараметры = Новый Структура("ЭтоУжеВтораяПопытка,ЗапускатьДиалогВыбораДАИлиСохраненияНет",Ложь,Истина);
	
	ОповещениеЗавершенияПодключенияРасширенияРаботыСФайлами = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект,ДопПараметры) ;
	НачатьПодключениеРасширенияРаботыСФайлами(ОповещениеЗавершенияПодключенияРасширенияРаботыСФайлами);
	
КонецФункции

&НаКлиенте
Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено,ДопПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		Если ДопПараметры.ЭтоУжеВтораяПопытка = Истина Тогда
			Сообщить("Не удалось подготовить расширение работы с файлами, Обратитесь к разработчику");
			Возврат;
		КонецЕсли;
		ОповещениеЗавершенияУстановкиРасширенияРаботыСФайлами = новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект,ДопПараметры.ЗапускатьДиалогВыбораДаИлиСохраненияНет);
		НачатьУстановкуРасширенияРаботыСФайлами(ОповещениеЗавершенияУстановкиРасширенияРаботыСФайлами);
	Иначе
		Если ДопПараметры.ЗапускатьДиалогВыбораДаИлиСохраненияНет = Истина Тогда
			НачатьРаботатьНепосредственноСФайлом();
		Иначе
			НачатьСохранениеФайла();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(ОписаниеОповещения) Экспорт
	ДопПараметры = Новый Структура("ЭтоУжеВтораяПопытка,ЗапускатьДиалогВыбораДАИлиСохраненияНет",Истина,ОписаниеОповещения);
	ОповещениеЗавершенияПодключенияРасширенияРаботыСФайлами = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект,ДопПараметры) ;
	НачатьПодключениеРасширенияРаботыСФайлами(ОповещениеЗавершенияПодключенияРасширенияРаботыСФайлами);
КонецПроцедуры

&НаКлиенте
Процедура ТекущийИсполнительПриИзменении(Элемент)
	//Если ПредИсполнитель = Объект.РеальныйИсполнитель Тогда
		Если Не ЗначениеЗаполнено(Объект.РеальныйИсполнитель) Тогда 
			Объект.РеальныйИсполнитель = Объект.ТекущийИсполнитель;
		КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекущийИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПредИсполнитель = Объект.ТекущийИсполнитель;
КонецПроцедуры

&НаКлиенте
Процедура ОбщееВремяФактПриИзменении(Элемент)
	ОбновитьСтоимость();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтоимость()
	Если Объект.Ставка > 0 Тогда
		Объект.Себестоимость = Объект.Ставка * Объект.ОбщееВремяФакт;
	Иначе
		Исполнитель = ?(ЗначениеЗаполнено(Объект.РеальныйИсполнитель), Объект.РеальныйИсполнитель, Объект.ТекущийИсполнитель);
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
		Запрос.УстановитьПараметр("ПустойВидВажности", Перечисления.ВидВажности.ПустаяСсылка());
		Запрос.УстановитьПараметр("ВидВажности", Объект.Важность);
		Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыборТарифа.ВидВажности КАК ВидВажности,
		|	ВыборТарифа.Ставка
		|ИЗ
		|	(ВЫБРАТЬ
		|		Тарифы.ВидВажности КАК ВидВажности,
		|		Тарифы.Ставка КАК Ставка
		|	ИЗ
		|		РегистрСведений.ТарифыРаботы.СрезПоследних(
		|				&Период,
		|				ФизЛицо = &Исполнитель
		|					И ВидВажности = &ПустойВидВажности) КАК Тарифы
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Тарифы.ВидВажности,
		|		Тарифы.Ставка
		|	ИЗ
		|		РегистрСведений.ТарифыРаботы.СрезПоследних(
		|				&Период,
		|				ФизЛицо = &Исполнитель
		|					И ВидВажности = &ВидВажности) КАК Тарифы) КАК ВыборТарифа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидВажности УБЫВ";
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда 
			Объект.Себестоимость = Результат.Ставка * Объект.ОбщееВремяФакт;
		Иначе
			Объект.Себестоимость = 0;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъемЧасовПриИзменении(Элемент)
	ОбновитьСтоимостьРабот();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтоимостьРабот()
	Исполнитель = ?(ЗначениеЗаполнено(Объект.РеальныйИсполнитель), Объект.РеальныйИсполнитель, Объект.ТекущийИсполнитель);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отдел", Объект.ОбращениеОт);
	Запрос.УстановитьПараметр("ПустойВидВажности", Перечисления.ВидВажности.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидВажности", Объект.Важность);
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыборТарифа.ВидВажности КАК ВидВажности,
	|	ВыборТарифа.Ставка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Тарифы.ВидВажности КАК ВидВажности,
	|		Тарифы.Ставка КАК Ставка
	|	ИЗ
	|		РегистрСведений.ТарифыОтделов.СрезПоследних(
	|				&Период,
	|				Отдел = &Отдел
	|					И ВидВажности = &ПустойВидВажности) КАК Тарифы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Тарифы.ВидВажности,
	|		Тарифы.Ставка
	|	ИЗ
	|		РегистрСведений.ТарифыОтделов.СрезПоследних(
	|				&Период,
	|				Отдел = &Отдел
	|					И ВидВажности = &ВидВажности) КАК Тарифы) КАК ВыборТарифа
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидВажности УБЫВ";
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда 
		Объект.СтоимостьРабот = Результат.Ставка * Объект.ОбъемЧасов;
	Иначе
		Объект.СтоимостьРабот = 0;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьПриИзменении(Элемент)
	ОбновитьСтоимость();
	ОбновитьСтоимостьРабот();
КонецПроцедуры

Процедура ОбновитьЗаголовки()
	КоличествоВложений = Объект.ВложенныеФайлы.Количество();
КонецПроцедуры


