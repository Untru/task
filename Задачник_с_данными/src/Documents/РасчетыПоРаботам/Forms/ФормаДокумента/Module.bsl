
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийРасчетов.ОплатаИсполнителю;
	КонецЕсли;
	
	ВидОперацииПредыдущий = Объект.ВидОперации;
	ОбновитьВидимость();
	ПересчитатьСумму();
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	Если Объект.Расшифровка.Количество() И ВидОперацииПредыдущий <> Объект.ВидОперации Тогда
		Ответ = Вопрос("При изменении вида документа, Расшифровка будет удалена, продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВидОперацииПредыдущий = Объект.ВидОперации;
			Объект.Расшифровка.Очистить();
		Иначе
			Объект.ВидОперации = ВидОперацииПредыдущий;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьВидимость();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимость()
	//Если Объект.ВидОперации = Перечисления.ВидыОперацийРасчетов.ОплатаИсполнителю Тогда
	//	Элементы.Исполнитель.Видимость = Истина;
	//	Элементы.РасшифровкаВремяФакт.Видимость = Истина;
	//	Элементы.РасшифровкаСебестоимость.Видимость = Истина;
	//	
	//	Элементы.Отделение.Видимость = Истина;
	//	Элементы.РасшифровкаВремя.Видимость = Ложь;
	//	Элементы.РасшифровкаСтоимостьРабот.Видимость = Ложь;
	//ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасчетов.ОплатаЗаказчиком Тогда
	//	Элементы.Исполнитель.Видимость = Ложь;
	//	Элементы.РасшифровкаВремяФакт.Видимость = Ложь;
	//	Элементы.РасшифровкаСебестоимость.Видимость = Ложь;
	//	
	//	Элементы.Отделение.Видимость = Истина;
	//	Элементы.РасшифровкаВремя.Видимость = Истина;
	//	Элементы.РасшифровкаСтоимостьРабот.Видимость = Истина;
	//Иначе
	//	Элементы.Исполнитель.Видимость = Ложь;
	//	Элементы.РасшифровкаВремяФакт.Видимость = Ложь;
	//	Элементы.РасшифровкаСебестоимость.Видимость = Ложь;
	//	
	//	Элементы.Отделение.Видимость = Ложь;
	//	Элементы.РасшифровкаВремя.Видимость = Ложь;
	//	Элементы.РасшифровкаСтоимостьРабот.Видимость = Ложь;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗадолжености(Команда)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасчетов.ОплатаИсполнителю") Тогда
		ЗаполнитьОплатуИсполнителю();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасчетов.ОплатаЗаказчиком") Тогда
		ЗаполнитьОплатуЗаказчика();
	Иначе
		Сообщить("Не выбран вид операции документа", СтатусСообщения.Внимание);
	КонецЕсли;
	ПересчитатьСумму();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОплатуИсполнителю()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("Исполнитель", Объект.Исполнитель);
	Запрос.УстановитьПараметр("Отделение", Объект.Отделение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Задача,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетСИсполнителямиОстатки.Задача КАК Задача,
	|		РасчетСИсполнителямиОстатки.СуммаОстаток КАК Сумма
	|	ИЗ
	|		РегистрНакопления.РасчетСИсполнителями.Остатки(
	|				,
	|				Исполнитель В ИЕРАРХИИ (&Исполнитель)
	|					И Отделение В ИЕРАРХИИ (&Отделение)) КАК РасчетСИсполнителямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетСИсполнителями.Задача,
	|		РасчетСИсполнителями.Сумма
	|	ИЗ
	|		РегистрНакопления.РасчетСИсполнителями КАК РасчетСИсполнителями
	|	ГДЕ
	|		РасчетСИсполнителями.Регистратор = &Регистратор) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Задача";
	Результат = Запрос.Выполнить().Выгрузить();
	Объект.Расшифровка.Загрузить(Результат);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОплатуЗаказчика()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("Отделение", Объект.Отделение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Задача,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗадолженостьКлиентовОстатки.Задача КАК Задача,
	|		ЗадолженостьКлиентовОстатки.СуммаОстаток КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ЗадолженостьКлиентов.Остатки(, Отделение В ИЕРАРХИИ (&Отделение)) КАК ЗадолженостьКлиентовОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗадолженостьКлиентов.Задача,
	|		ЗадолженостьКлиентов.Сумма
	|	ИЗ
	|		РегистрНакопления.ЗадолженостьКлиентов КАК ЗадолженостьКлиентов
	|	ГДЕ
	|		ЗадолженостьКлиентов.Регистратор = &Регистратор) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Задача";
	Результат = Запрос.Выполнить().Выгрузить();
	Объект.Расшифровка.Загрузить(Результат);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПриИзменении(Элемент)
	ПересчитатьСумму();
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСумму()
	СуммаДокумента = 0;
	Для Каждого ТекСтрока Из Объект.Расшифровка Цикл
		СуммаДокумента = СуммаДокумента + ТекСтрока.Сумма;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетПоЗадачам(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Сообщить("Запишите документ.");
		Возврат;
	КонецЕсли;
	
	ОтчетФорма = ПолучитьФорму("Отчет.ОтчетПоРаботе.Форма");
	Отбор = ОтчетФорма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Отбор.Очистить();
	
	СписокЗадач = Новый СписокЗначений;
	Для Каждого ТекСтрока Из Объект.Расшифровка Цикл
		СписокЗадач.Добавить(ТекСтрока.Задача);
	КонецЦикла;
	
	ПользовательскиеНастройки = ОтчетФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	Для Каждого ТекНастройка Из ПользовательскиеНастройки Цикл
		Если ТипЗнч(ТекНастройка) = Тип("ОтборКомпоновкиДанных") тогда
			Отбор = ТекНастройка.Элементы;
		ИначеЕсли ТипЗнч(ТекНастройка) = Тип("ВыбранныеПоляКомпоновкиДанных") тогда
			ВыбранныеПоля = ТекНастройка.Элементы;
		КонецЕсли;
	КонецЦикла;
	
	Отбор.Очистить();
	ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор); 
	НовыйОтбор = Отбор.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.Использование = Истина;
	НовыйОтбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	НовыйОтбор.Представление = Строка(Объект.Ссылка);
	НовыйОтбор.ПредставлениеПользовательскойНастройки = "Расчеты по работам";
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	НовыйОтбор.ПравоеЗначение = СписокЗадач;
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасчетов.ОплатаЗаказчиком") Тогда
		ВыбранныеПоля.Очистить();
		
		НовоеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОбъемЧасов");
		НовоеПоле.Использование = Истина;
		
		НовоеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("СтоимостьРабот");
		НовоеПоле.Использование = Истина;
		
		//НовоеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		//НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("СуммаЗадолженостьКлиента");
		//НовоеПоле.Использование = Истина;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасчетов.ОплатаИсполнителю") Тогда
		ВыбранныеПоля.Очистить();
		
		НовоеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОбщееВремяФакт");
		НовоеПоле.Использование = Истина;
		
		НовоеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("Себестоимость");
		НовоеПоле.Использование = Истина;
		
		//НовоеПоле = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		//НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("СуммаРасчетСИсполнителем");
		//НовоеПоле.Использование = Истина;
	КонецЕсли;
	
	ОтчетФорма.Открыть();
	ОтчетФорма.СкомпоноватьРезультат();
КонецПроцедуры
