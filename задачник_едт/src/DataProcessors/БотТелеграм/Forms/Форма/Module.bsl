#Область ЗдесьНичегоИнтересногоНет
&НаКлиенте
Процедура МенюДанныеФормированияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура  ОповещениеРедактированияКода(Значение,ПараметрыОписания) Экспорт 
	
	
	Если Значение = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ПараметрыОписания.ДанныеФормирования = Значение;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЭкспорта()
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	РезультатСтркутура = ОбъектОбработки.ПолучитьСтруктуруНастроек();
	Возврат ЗначениеВСтрокуВнутр(РезультатСтркутура);
КонецФункции

&НаКлиенте
Процедура ЭкспортНастроек(Команда)
	
	ТекстЭкспорта = ПолучитьТекстЭкспорта();
	
	Описание = Новый ОписаниеОповещения("РезервноеКопирование",ЭтаФорма,Ложь);
	ПоказатьВводСтроки(Описание,ТекстЭкспорта,"Это настройки",,Истина);
	

КонецПроцедуры

&НаКлиенте
Процедура РезервноеКопирование(СтрокаВВода,ДопПараметры) экспорт
	
	РезервноеКопированиеСервер(СтрокаВВода,ДопПараметры);
	
КонецПроцедуры

Процедура РезервноеКопированиеСервер(СтрокаВВода,ДопПараметры) экспорт
	
	Если ДопПараметры= Истина  и не СтрокаВВода = Неопределено Тогда
		
		ОбъектОбработки = РеквизитФормыВЗначение("Объект");
		РезультатСтркутура = ЗначениеИзСтрокиВнутр(СтрокаВВода);
		ОбъектОбработки.ЗагрузитьВОбъект(РезультатСтркутура);
		//ОбъектОбработки.ЗаписатьНастройки();
		ЗначениеВРеквизитФормы(ОбъектОбработки,"Объект");
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиНаСервере()
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ОбъектОбработки.ПрочитатьНастройки();
	ЗначениеВРеквизитФормы(ОбъектОбработки,"Объект");	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройки(Команда)
	ПрочитатьНастройкиНаСервере();
	РазвернутьВсеМеню()
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗапросыНаСервере()
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ОбъектОбработки.ОбработкаЗапросов();
	ЗначениеВРеквизитФормы(ОбъектОбработки,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗапросы(Команда=Неопределено)Экспорт 
	ОбработатьЗапросыНаСервере();
	РазвернутьВсеМеню()
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиНаСервере()
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ОбъектОбработки.ЗаписатьНастройки();
	ЗначениеВРеквизитФормы(ОбъектОбработки,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройки(Команда)
	ЗаписатьНастройкиНаСервере();
	РазвернутьВсеМеню()
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПрочитатьНастройкиНаСервере();
	
	УстановитьВидимостьДоступность();
	ОбработчикПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Элементы.ГруппаПрокси.Видимость = Объект.УказатьПрокси;
	Элементы.ТекстЗаглушки.Видимость=Объект.ВключитьЗаглушку;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортНастроек(Команда)
	
	ТекстЭкспорта = "";
	Описание = Новый ОписаниеОповещения("РезервноеКопирование",ЭтаФорма,Истина);
	ПоказатьВводСтроки(Описание,ТекстЭкспорта,"Сюда скопировать",,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеМеню()
	
	для Каждого стр из Объект.Меню.ПолучитьЭлементы() Цикл 
		Элементы.Меню.Развернуть(стр.ПолучитьИдентификатор(),Истина);	
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура МенюРолиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоступныеРоли = ПолучитьСписокЗначенийДоступныхРолей();
	
	Если Элементы.Меню.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	текДанные = Объект.Меню.НайтиПоИдентификатору(Элементы.Меню.ТекущаяСтрока);
	ТекМассивРолей = РазложитьСтрокуВМассивПодстрок(текДанные.Роли,"|",Истина);
	
	Для каждого Стр Из ДоступныеРоли Цикл
	
		Если НЕ ТекМассивРолей.Найти(СокрЛП(Стр.Значение)) = Неопределено Тогда
			Стр.Пометка = Истина;
		КонецЕсли;
		
	КонецЦикла; 
	
	ОповещениеВыбораРоли = Новый ОписаниеОповещения("ОповещениеВыбораРоли",ЭтаФорма,текДанные);
	ДоступныеРоли.ПоказатьОтметкуЭлементов(ОповещениеВыбораРоли,"Выберите роли");
КонецПроцедуры

&НаКлиенте
Процедура  ОповещениеВыбораРоли(Значение,ПараметрыОписания) Экспорт 
	
	ТекСтрокаРолей = "";
	Если Значение = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Для Каждого стр из Значение Цикл 
		
		Если стр.Пометка Тогда
			Разделитель = ?(ЗначениеЗаполнено(ТекСтрокаРолей)," | ","");
			ТекСтрокаРолей = ТекСтрокаРолей+Разделитель+стр.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	
	ПараметрыОписания.Роли = ТекСтрокаРолей;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокЗначенийДоступныхРолей()
	
	СписокРолей = Новый СписокЗначений; 
	
	Для Каждого стр из Объект.РольПользователей Цикл 
		
		СписокРолей.Добавить(стр.Роль);
		
	КонецЦикла;
	
	Возврат СписокРолей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(СокрЛП(Подстрока));
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(СокрЛП(Строка));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Процедура МенюПриИзменении(Элемент)
	
	ПересчитатьКодыУзлов(Объект.Меню);
	
КонецПроцедуры

&НаКлиенте 
Процедура ПересчитатьКодыУзлов(ВходящийЭлемент,Знач УзелРодителя="")
	
	ЭлементыУзла = ВходящийЭлемент.ПолучитьЭлементы();
	
	Если ТипЗнч(ВходящийЭлемент) = Тип("ДанныеФормыЭлементДерева") и ЭлементыУзла.Количество()>0  Тогда
		ВходящийЭлемент.ТипДействия = "";
	КонецЕсли;
	
	для Каждого стр из  ЭлементыУзла Цикл 
		
		ТекНомер = ЭлементыУзла.Индекс(стр)+1;
		
		ИтоговыйНомер = УзелРодителя+?(ЗначениеЗаполнено(УзелРодителя),"_","")+ТекНомер;
		стр.Узел =  ИтоговыйНомер;
		ПересчитатьКодыУзлов(стр,стр.Узел);

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПриИзменении(Элемент=Неопределено)
	
	//Если Обработчик Тогда
	//	ПодключитьОбработчикОжидания("ОбрабобкаОжиданияЗапросов",1);
	//Иначе 
	//	ОтключитьОбработчикОжидания("ОбрабобкаОжиданияЗапросов");
	//КонецЕсли;
	
	ВключитьВыключитьОбработчик();
КонецПроцедуры

&НаСервере
Процедура ВключитьВыключитьОбработчик()
	РегЗадача = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОбработкаЗапросовТелеграм);
	РегЗадача.Использование = Обработчик;
	РегЗадача.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ОбрабобкаОжиданияЗапросов() Экспорт 
	
	ОбработатьЗапросы();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиРолиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоступныеРоли = ПолучитьСписокЗначенийДоступныхРолей();
	
	текДанные = Объект.Пользователи.НайтиПоИдентификатору(Элементы.Пользователи.ТекущаяСтрока);
	ТекМассивРолей = РазложитьСтрокуВМассивПодстрок(текДанные.Роли,"|",Истина);
	
	Для каждого Стр Из ДоступныеРоли Цикл
	
		Если НЕ ТекМассивРолей.Найти(СокрЛП(Стр.Значение)) = Неопределено Тогда
			Стр.Пометка = Истина;
		КонецЕсли;
		
	КонецЦикла; 
	
	ОповещениеВыбораРоли = Новый ОписаниеОповещения("ОповещениеВыбораРолиПользователя",ЭтаФорма,текДанные);
	ДоступныеРоли.ПоказатьОтметкуЭлементов(ОповещениеВыбораРоли,"Выберите роли");
	
КонецПроцедуры

&НаКлиенте
Процедура  ОповещениеВыбораРолиПользователя(Значение,ПараметрыОписания) Экспорт 
	
	ТекСтрокаРолей = "";
	Если Значение = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Для Каждого стр из Значение Цикл 
		
		Если стр.Пометка Тогда
			Разделитель = ?(ЗначениеЗаполнено(ТекСтрокаРолей)," | ","");
			ТекСтрокаРолей = ТекСтрокаРолей+Разделитель+стр.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	
	ПараметрыОписания.Роли = ТекСтрокаРолей;
КонецПроцедуры

&НаКлиенте
Процедура СвойПроксиПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

Процедура ПроверитьКодТекущейСтроки(Значение,Параметры) Экспорт 
	
	Если Значение = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если Элементы.Меню.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ТекДанные = Объект.Меню.НайтиПоИдентификатору(Элементы.Меню.ТекущаяСтрока);
	РезультатСтркутура = ОбъектОбработки.ПолучитьРезультатВыполненияКода(ТекДанные.ДанныеФормирования,Значение);
	
	Сообщить(РезультатСтркутура.Сообщение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьЗаглушкуПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура РазослатьНаСервере()
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ОбъектОбработки.РазослатьСообщение();
	
КонецПроцедуры

&НаКлиенте
Процедура Разослать(Команда)
	РазослатьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РолиПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоступныеРоли = ПолучитьСписокЗначенийДоступныхРолей();
	
	ТекМассивРолей = РазложитьСтрокуВМассивПодстрок(Объект.РолиПоУмолчанию,"|",Истина);
	
	Для каждого Стр Из ДоступныеРоли Цикл
	
		Если НЕ ТекМассивРолей.Найти(СокрЛП(Стр.Значение)) = Неопределено Тогда
			Стр.Пометка = Истина;
		КонецЕсли;
		
	КонецЦикла; 
	
	ОповещениеВыбораРоли = Новый ОписаниеОповещения("ОповещениеВыбораРолиПоУмолчанию",ЭтаФорма,Объект.РолиПоУмолчанию);
	ДоступныеРоли.ПоказатьОтметкуЭлементов(ОповещениеВыбораРоли,"Выберите роли");
	
КонецПроцедуры

&НаКлиенте
Процедура  ОповещениеВыбораРолиПоУмолчанию(Значение,ПараметрыОписания) Экспорт 
	
	ТекСтрокаРолей = "";
	Если Значение = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Для Каждого стр из Значение Цикл 
		
		Если стр.Пометка Тогда
			Разделитель = ?(ЗначениеЗаполнено(ТекСтрокаРолей)," | ","");
			ТекСтрокаРолей = ТекСтрокаРолей+Разделитель+стр.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Объект.РолиПоУмолчанию= ТекСтрокаРолей;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиПоУмолчаниюНаСервере()
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	МакетПоУмолчанию = ОбъектОбработки.ПолучитьМакет("НастройкиПоУмолчанию");
	РезультатСтркутура = ЗначениеИзСтрокиВнутр(МакетПоУмолчанию.ПолучитьТекст());
	ОбъектОбработки.ЗагрузитьВОбъект(РезультатСтркутура);
	ЗначениеВРеквизитФормы(ОбъектОбработки,"Объект");

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиПоУмолчанию(Команда)
	ЗагрузитьНастройкиПоУмолчаниюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура МенюДанныеФормированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	Если Элементы.Меню.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	текДанные = Объект.Меню.НайтиПоИдентификатору(Элементы.Меню.ТекущаяСтрока);
	
	Если текДанные.ТипДействия = "Выполнить код" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		текДанные = Объект.Меню.НайтиПоИдентификатору(Элементы.Меню.ТекущаяСтрока);
		
		ОповещениеВыбораКода = Новый ОписаниеОповещения("ОповещениеРедактированияКода",ЭтаФорма,текДанные);
		
		ПоказатьВводСтроки(ОповещениеВыбораКода,текДанные.ДанныеФормирования,"Перменные:"+Символы.ПС+"Результат (строка),ПользовательИБ (строка), Клавиатура (Массив кнопок),ПутьКФайлу (строка), ИмяФайла (строка)",,Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МенюДанныеФормированияОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.Меню.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	текДанные = Объект.Меню.НайтиПоИдентификатору(Элементы.Меню.ТекущаяСтрока);
	
	Если текДанные.ТипДействия = "Выполнить код" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОписаниеЗакрытия = Новый ОписаниеОповещения("ПроверитьКодТекущейСтроки",ЭтаФорма);
		ПоказатьВводСтроки(ОписаниеЗакрытия,"","Введите пользователя ИБ");
		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура МенюПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "МенюДанныеФормирования" Тогда
		
		Если Элементы.Меню.ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		текДанные = Объект.Меню.НайтиПоИдентификатору(Элементы.Меню.ТекущаяСтрока);
		
		Если текДанные.ТипДействия = "Выполнить код" Тогда
			
			Элемент.ТекущийЭлемент.РедактированиеТекста = Ложь ;
			
		Иначе 
			
			Элемент.ТекущийЭлемент.РедактированиеТекста = Истина;
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипФайлаОтчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьВозможныеТипыСохранения();
	
КонецПроцедуры

Функция ПолучитьВозможныеТипыСохранения()
	
	СписокЗнач = Новый СписокЗначений;
	для Каждого стр из ТипФайлаТабличногоДокумента Цикл 
		СписокЗнач.Добавить(СокрЛП(стр));
	КонецЦикла;
	
	Возврат СписокЗнач;
		
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	РегЗадача = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОбработкаЗапросовТелеграм);
	Обработчик = РегЗадача.Использование;

КонецПроцедуры

#КонецОбласти


