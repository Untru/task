&НаКлиенте
Процедура УстановитьСтатус(Команда)
	ДопПараметры = Новый Структура;
	ОповещениеЗакрытия = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормы", ЭтаФорма,ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаДобавленияСтатуса",,ЭтаФорма,,,,ОповещениеЗакрытия);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСообщение(Команда)
	ДопПараметры = Новый Структура;
	ОповещениеЗакрытия = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормы", ЭтаФорма,ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаДобавленияСообщения",,ЭтаФорма,,,,ОповещениеЗакрытия);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияФормы(РезультатЗакрытия,ДопПараметры) Экспорт
	 ВыполнитьПослеЗакрытияФормыНаСервере(ДопПараметры);
	 Если НЕ ДопПараметры.Количество() = 0 Тогда
	 	ЭтаФорма.ОтобразитьИзменениеДанных(ТекущийДокумент,ВидИзмененияДанных.Изменение);
	 КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПослеЗакрытияФормыНаСервере(ДопПараметры) 
	Если НЕ ДопПараметры.Количество() = 0 Тогда
		ОбъектДокумента = ТекущийДокумент.ПолучитьОбъект();
		Если ДопПараметры.РежимДобавления = "Статус" Тогда
			НоваяСтрока = ОбъектДокумента.Статусы.Вставить(0);	
			НоваяСтрока.Дата = ТекущаяДата();
			НоваяСтрока.Статус = ДопПараметры.Статус;
			НоваяСтрока.Добавил = ПараметрыСеанса.ТекущийПользователь.Сотрудник;
			ОбъектДокумента.ТекущийСтатус = ДопПараметры.Статус;
			Если ДопПараметры.Статус.КоличествоЧасовВыполнения > 0 Тогда
				ОбъектДокумента.ВыполнитьДо = НоваяСтрока.Дата+(ДопПараметры.Статус.КоличествоЧасовВыполнения*3600);
			Иначе
				ОбъектДокумента.ВыполнитьДо = '00010101';
			КонецЕсли;
			// Добавим сообщение если оно введено
			Если ЗначениеЗаполнено(ДопПараметры.Сообщение) Тогда
				НоваяСтрока = ОбъектДокумента.Сообщения.Вставить(0);	
				НоваяСтрока.Дата = ТекущаяДата();
				НоваяСтрока.Сообщение = ДопПараметры.Сообщение;
				НоваяСтрока.ЯвляетсяРешением = ДопПараметры.ЯвляетсяРешением;
				НоваяСтрока.Добавил = ПараметрыСеанса.ТекущийПользователь.Сотрудник;
				Если ДопПараметры.ЯвляетсяРешением тогда
					ОбъектДокумента.Решение = ДопПараметры.Сообщение;
				КонецЕсли;
			КонецЕсли;	
		ИначеЕсли ДопПараметры.РежимДобавления = "Сообщение" Тогда
			НоваяСтрока = ОбъектДокумента.Сообщения.Вставить(0);
			НоваяСтрока.Дата = ТекущаяДата();
			НоваяСтрока.Сообщение = ДопПараметры.Сообщение;
			НоваяСтрока.ЯвляетсяРешением = ДопПараметры.ЯвляетсяРешением;
			НоваяСтрока.Добавил = ПараметрыСеанса.ТекущийПользователь.Сотрудник;
			Если ДопПараметры.ЯвляетсяРешением тогда
				ОбъектДокумента.Решение = ДопПараметры.Сообщение;
			КонецЕсли;
		КонецЕсли;
		Попытка
			ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить("Информация не записана.");
		КонецПопытки;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекПольз = ОбщийМодульСервер.ТекущийПользователь();
	Если НЕ ПроверкаЗаполненияСотрудника(ТекПольз) Тогда
		 ОбщийМодульКлиентСервер.СообщитьПользователю("У текущего пользователя не заполнено поле 'Сотрудник'. Работа с обращениями не возможна.");
		 Отказ = Истина;
	 КонецЕсли;	   
	 
	 
Если ЕстьЛиПравоИсполнитель() Тогда 
	Элементы.СписокЗаявок.ПодчиненныеЭлементы.СписокЗаявокОплачено.Видимость = Ложь;
	Элементы.СписокЗаявок.ПодчиненныеЭлементы.СписокЗаявокСтоимостьРабот.Видимость = Ложь;
	Элементы.СписокЗаявок.ПодчиненныеЭлементы.СписокЗаявокОбъемЧасов.Видимость = Ложь;
Иначе 
	Элементы.СписокЗаявок.ПодчиненныеЭлементы.СписокЗаявокСебестоимость.Видимость = Ложь;
	Элементы.СписокЗаявок.ПодчиненныеЭлементы.СписокЗаявокОплаченоПрограммисту.Видимость = Ложь;
	Элементы.СписокЗаявок.ПодчиненныеЭлементы.СписокЗаявокОбщееВремяФакт.Видимость = Ложь;
	Элементы.СписокЗаявок.ПодчиненныеЭлементы.СписокЗаявокРеальныйИсполнитель.Видимость = Ложь;
КонецЕсли;	

Если ЕстьЛиПравоПолныеПрава() Тогда 
	Элементы.СписокЗаявок.ПодчиненныеЭлементы.СписокЗаявокСебестоимость.Видимость = Истина;
	Элементы.СписокЗаявок.ПодчиненныеЭлементы.СписокЗаявокОплаченоПрограммисту.Видимость = Истина;
	Элементы.СписокЗаявок.ПодчиненныеЭлементы.СписокЗаявокОбщееВремяФакт.Видимость = Истина;
	Элементы.СписокЗаявок.ПодчиненныеЭлементы.СписокЗаявокРеальныйИсполнитель.Видимость = Истина;
КонецЕсли;	
	
	
	ОформлениеНаСервере();
	ОтборыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОформлениеНаСервере()
	ЭлементыПользовательскихНастроек = СписокЗаявок.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	Для Каждого Элемент Из ЭлементыПользовательскихНастроек Цикл
		Если ТипЗнч(Элемент) = ТипЗнч(СписокЗаявок.КомпоновщикНастроек.Настройки.Порядок) Тогда
			Элемент.Элементы.Очистить();
			УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("Дата");
			УсловиеСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			УсловиеСортировки.Использование = Истина;
		КонецЕсли;
		Если ТипЗнч(Элемент) = ТипЗнч(СписокЗаявок.КомпоновщикНастроек.Настройки.УсловноеОформление) Тогда
			Элемент.Элементы.Очистить();
			Выборка = Справочники.Статусы.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ЗначенияСтиляСтроки = ОбщийМодульСервер.ПолучитьЦветаСтрок(Выборка.ЦветСтроки);
				
				// По основному цвету
				ЭлементУсловногоОформления = Элемент.Элементы.Добавить(); 
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийСтатус.ЦветСтроки");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = Выборка.ЦветСтроки;
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВыполнитьДо");
				Если  Выборка.КоличествоЧасовВыполнения > 0 Тогда
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
					ЭлементОтбора.ПравоеЗначение = ТекущаяДата();
				Иначе
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементОтбора.ПравоеЗначение = '00010101';
				КонецЕсли;

				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЗначенияСтиляСтроки.ЦветСтроки);
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЗначенияСтиляСтроки.ЦветШрифта);
				
				//По дополнительному цвету
				Если  Выборка.КоличествоЧасовВыполнения > 0 Тогда
					ЗначенияСтиляСтроки = ОбщийМодульСервер.ПолучитьЦветаСтрок(Выборка.ЦветСтрокиПриПревышении);

					ЭлементУсловногоОформления = Элемент.Элементы.Добавить(); 
					ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийСтатус.ЦветСтрокиПриПревышении");
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементОтбора.ПравоеЗначение = Выборка.ЦветСтрокиПриПревышении;
					ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВыполнитьДо");
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
					ЭлементОтбора.ПравоеЗначение = ТекущаяДата();
					
					ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЗначенияСтиляСтроки.ЦветСтроки);
					ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЗначенияСтиляСтроки.ЦветШрифта);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОтборыНаСервере()
	//Статус
	Если ОбщийМодульСервер.ТекущийПользователь().НастройкиПользователя.СкраватьОбращенияВСтатусеВыполнено Тогда
		ЭлементОтбора = СписокЗаявок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийСтатус"); 
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		ЭлементОтбора.Использование = Истина;
		НовСписок = Новый СписокЗначений;
		НовСписок.Добавить(Справочники.Статусы.Закрыто);
		НовСписок.Добавить(Справочники.Статусы.Выполнено);
		НовСписок.Добавить(Справочники.Статусы.ОтмененаЗаказчиком);
		ЭлементОтбора.ПравоеЗначение = НовСписок;
	Иначе	
		ЭлементОтбора = СписокЗаявок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийСтатус"); 
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = Справочники.Статусы.Закрыто;
	КонецЕсли;
	Если ОбщийМодульСервер.ТекущийПользователь().Наименование =  "Павел Чегодаев"    Тогда
		ЭлементОтбора = СписокЗаявок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НеПоказывать"); 
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение =Ложь;
		ЭлементОтбора.Использование = Истина;
	КонецЕсли ;
		
	// Категория 
	ЭлементОтбора = СписокЗаявок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущаяКатегория"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Ложь;
	// Обращение От
	ЭлементОтбора = СписокЗаявок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбращениеОт"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Ложь;
	//// В отдел
	//ЭлементОтбора = СписокЗаявок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийОтделИсполнитель"); 
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.Использование = Ложь;
	// Исполнитель
	Если ОбщийМодульСервер.ТекущийПользователь().НастройкиПользователя.УстанавливатьОтборПоИсполнителю Тогда
		ЭлементОтбора = СписокЗаявок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийИсполнитель"); 
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ОбщийМодульСервер.ТекущийПользователь().Сотрудник;
		ЭлементОтбора.Использование = Истина;
	Иначе
		ЭлементОтбора = СписокЗаявок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийИсполнитель"); 
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Ложь;
	КонецЕсли;
	
	// процент выполнения
	ЭлементОтбора = СписокЗаявок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийСтатус.ПроцентВыполнения"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.Использование = Ложь;
	// Важность
	ЭлементОтбора = СписокЗаявок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Важность"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Ложь;
	
	
	Если ОбщийМодульСервер.ТекущийПользователь().НастройкиПользователя.УстанавливатьОтборПоАвтору Тогда
		ЭлементОтбора = СписокЗаявок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автор"); 
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ОбщийМодульСервер.ТекущийПользователь().Сотрудник;
		ЭлементОтбора.Использование = Истина;
	Иначе
		ЭлементОтбора = СписокЗаявок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автор"); 
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Ложь;
	КонецЕсли;
	//// Пометка удаления
	//ЭлементОтбора = СписокЗаявок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления"); 
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.ПравоеЗначение = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаявокПриАктивизацииСтроки(Элемент)
	ТекущийДокумент = Элемент.ТекущаяСтрока;
КонецПроцедуры

&НаСервере
Функция ПроверкаЗаполненияСотрудника(ТекПольз)
	 Возврат ЗначениеЗаполнено(ТекПольз.Сотрудник);
 КонецФункции	

&НаКлиенте
Процедура ПрисоединенныеФайлы(Команда)
	ПараметрыФормы = Новый Структура; 
    ПараметрыФормы.Вставить("ВладелецФайла", ТекущийДокумент);
    ОткрытьФорму("РегистрСведений.ПрисоединенныеФайлы.Форма.ФормаПросмотраФайлов",ПараметрыФормы ,ЭтаФорма , ) ;
 КонецПроцедуры

&НаКлиенте
 Процедура ПечатьОбращения(Команда)
	 
	ТабДок = Новый ТабличныйДокумент;
	Если ЭтаФорма.ТекущийЭлемент.Имя = "СписокЗаявок" Тогда
		МассивСтрок = ЭтаФорма.ТекущийЭлемент.ВыделенныеСтроки;
	Иначе
		МассивСтрок = ТекущийДокумент;
	КонецЕсли;	
	ПечатьОбращенияНаСервере(ТабДок,МассивСтрок);
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.Показать("Печатная форма обращений.");
КонецПроцедуры

&НаСервере
Процедура ПечатьОбращенияНаСервере(ТабДок,Ссылка) Экспорт
	Макет = Обработки.РабочийСтолОбращенийТП.ПолучитьМакет("Обращение");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбращениеВПоддержку.Автор,
	|	ОбращениеВПоддержку.Важность,
	|	ОбращениеВПоддержку.Дата,
	|	ОбращениеВПоддержку.Заголовок,
	|	ОбращениеВПоддержку.ТекущаяКатегория,
	|	ОбращениеВПоддержку.КонтактноеЛицо,
	|	ОбращениеВПоддержку.Номер,
	|	ОбращениеВПоддержку.ОбращениеОт,
	|	ОбращениеВПоддержку.Описание,
	|	ОбращениеВПоддержку.ТекущийИсполнитель,
	|	ОбращениеВПоддержку.ТекущийОтделИсполнитель,
	|	ОбращениеВПоддержку.ТекущийСтатус,
	|	ОбращениеВПоддержку.Телефон,
	|	ОбращениеВПоддержку.ОбращениеОт.АдресФактический КАК Адрес
	|ИЗ
	|	Документ.ОбращениеВПоддержку КАК ОбращениеВПоддержку
	|ГДЕ
	|	ОбращениеВПоддержку.Ссылка В(&Ссылка)";
	Запрос.Параметры.Вставить("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ТабДок.Очистить();

	Пока Выборка.Следующий() Цикл
		ОбластьЗаголовок.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьЗаголовок);

		Шапка.Параметры.Заполнить(Выборка);
		// Цвет важности
		Если Выборка.Важность = Перечисления.ВидВажности.Высокая Тогда
			Шапка.Область("R3C5").ЦветТекста = Новый Цвет(220,20,60);
		ИначеЕсли Выборка.Важность = Перечисления.ВидВажности.Обычная Тогда
			Шапка.Область("R3C5").ЦветТекста = Новый Цвет(34,139,34);
		Иначе
			Шапка.Область("R3C5").ЦветТекста = Новый Цвет(65,105,225);
		КонецЕсли ;
		ТабДок.Вывести(Шапка, Выборка.Уровень());

	КонецЦикла;
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьОтчетПоОбращеним(Команда)
	ОткрытьФорму("Отчет.ОтчетПоОбращениям.Форма", , ,);
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	// Вставить содержимое обработчика.
		ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.СписокЗаявок);

КонецПроцедуры


&НаСервере
Функция  ЕстьЛиПравоИсполнитель()
Возврат 	РольДоступна("ИсполнениеОбращений");
КонецФункции	

&НаСервере
Функция  ЕстьЛиПравоПолныеПрава()
Возврат 	РольДоступна("ПолныеПрава");
КонецФункции	


&НаКлиенте
Процедура Команда1(Команда)
	// Вставить содержимое обработчика.
	УстановитьКомпактныйРежимФормНаСервере() ;
КонецПроцедуры

&НаСервере
Процедура УстановитьКомпактныйРежимФормНаСервере() 
	
			РежимКомпактности = ВариантМасштабаФормКлиентскогоПриложения.Компактный; 
		  Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	    
	    Если Не Пользователь = Неопределено Тогда
	        
	        Настройка = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения", "",, Пользователь.Имя);
			
			Если Не ТипЗнч(Настройка) = Тип("НастройкиКлиентскогоПриложения") Тогда
	            Настройка = Новый НастройкиКлиентскогоПриложения;
	        КонецЕсли;
	        
	        Настройка.ВариантМасштабаФормКлиентскогоПриложения = РежимКомпактности;
	        ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "", Настройка,, Пользователь.Имя);
	        
	    КонецЕсли;

	
	
КонецПроцедуры

&НаКлиенте
Процедура НеПоказывать(Команда)
	НеПоказыватьНаСервере(Элементы.СписокЗаявок.ВыделенныеСтроки);
КонецПроцедуры

&НаСервере
Процедура НеПоказыватьНаСервере(МассивТикетов)
	// Вставить содержимое обработчика.
	Для каждого тикет из     МассивТикетов        Цикл
	оБР = тикет.Ссылка.пОЛУЧИТЬоБЪЕкт();
	оБР.НеПоказывать = Истина;
	обр.Записать();
	КонецЦикла;	
		
КонецПроцедуры


