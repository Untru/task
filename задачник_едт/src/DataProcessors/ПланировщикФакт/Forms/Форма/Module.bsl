
&НаКлиенте
Процедура Обновить(Команда)
	// Вставить содержимое обработчика.
	НастроитьПланировщик();
КонецПроцедуры


&НаКлиенте
Процедура НастроитьПланировщик()
	
	ПланировщикОтображатьНеРабочиеДни = Истина;
	КоличествоРабочихЧасовВДне = 8;
	НачалоРабочегоДня =  '00010101090000';
	Если не ЗначениеЗаполнено(ПланировщикПериодС) Тогда 
		ПланировщикПериодС  = НачалоНедели(ТекущаяДата());
		ПланировщикПериодПо = (ПланировщикПериодС + 7*24*3600)-1;
 	КонецЕсли;

	СубботаРабочий =Ложь;
	ВоскресеньеРабочий = Ложь;
	ПланировщикРежимОтображения= "Две недели";
	
	Если Не ЗначениеЗаполнено(ПланировщикРежимОтображения) Тогда
		ПланировщикРежимОтображения = "Две недели";
		ПланировщикПериодПо = (ПланировщикПериодС + 14*24*3600)-1;
	КонецЕсли;
	
	Планировщик.ШкалаВремени.Элементы[0].Метки.Очистить();
	Планировщик.ШкалаВремени.Элементы[1].Метки.Очистить();
	Планировщик.ШкалаВремени.Элементы[3].Метки.Очистить();
	
	Если ПланировщикРежимОтображения = "По ресурсам - месяц" Тогда
		//ПланировщикПериодС = НачалоМесяца(ПланировщикПериодС);
		//ПланировщикПериодПо = КонецМесяца(ПланировщикПериодПо);
		ПланировщикОтображатьВРазрезеРесурсов = Истина;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Месяц;
		Планировщик.КратностьПериодическогоВарианта = 1;
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Видимость = Ложь;
		Планировщик.ШкалаВремени.Элементы[1].Видимость = Истина;
		Планировщик.ШкалаВремени.Элементы[2].Видимость = Ложь;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='MMMM yyyy ""г.""'";
		ШкалаВремениДни = Планировщик.ШкалаВремени.Элементы[1];
		МаксимальнаяДлинаВехи = 20;
	ИначеЕсли ПланировщикРежимОтображения = "По ресурсам - неделями" Тогда
		ПланировщикОтображатьВРазрезеРесурсов = Истина;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Неделя;
		Планировщик.КратностьПериодическогоВарианта = 1;
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Видимость = Истина;
		Планировщик.ШкалаВремени.Элементы[1].Видимость = Ложь;
		Планировщик.ШкалаВремени.Элементы[2].Видимость = Истина;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dd.MM.yyyy ""г.""'";
		ШкалаВремениДни = Планировщик.ШкалаВремени.Элементы[0];
		МаксимальнаяДлинаВехи = 40;
	ИначеЕсли ПланировщикРежимОтображения = "Две недели" Тогда
		ПланировщикОтображатьВРазрезеРесурсов = Истина;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Неделя;
		Планировщик.КратностьПериодическогоВарианта = 1;
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Видимость = Истина;
		Планировщик.ШкалаВремени.Элементы[1].Видимость = Ложь;
		Планировщик.ШкалаВремени.Элементы[2].Видимость = Истина;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dd.MM.yyyy ""г.""'";
		ШкалаВремениДни = Планировщик.ШкалаВремени.Элементы[0];
		МаксимальнаяДлинаВехи = 40;
	ИначеЕсли ПланировщикРежимОтображения = "Месяц" Тогда
		//ПланировщикПериодС = НачалоНедели(ПланировщикПериодС);
		//ПланировщикПериодПо = КонецНедели(КонецМесяца(ПланировщикПериодС));
		ПланировщикОтображатьВРазрезеРесурсов = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта = 7;
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		Планировщик.ШкалаВремени.Элементы[0].Видимость = ЛОжь;
		Планировщик.ШкалаВремени.Элементы[1].Видимость = Истина;
		Планировщик.ШкалаВремени.Элементы[2].Видимость = Ложь;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ=' '";
		ШкалаВремениДни = Планировщик.ШкалаВремени.Элементы[3];
		МаксимальнаяДлинаВехи = 40;
	КонецЕсли;
	
	Планировщик.НачалоПериодаОтображения = НачалоДня(ПланировщикПериодС) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60);
	Планировщик.КонецПериодаОтображения  = НачалоДня(ПланировщикПериодПо) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60) + КоличествоРабочихЧасовВДне * 3600 - 1;
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	//Планировщик.ТекущиеПериодыОтображения.Добавить(НачалоДня(ПланировщикПериодС) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60), 
	//			НачалоДня(ПланировщикПериодПо) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60) + КоличествоРабочихЧасовВДне * 3600);
	
	
	пТекущийПериод = ПланировщикПериодС;
	Планировщик.ИнтервалыФона.Очистить();
	Пока пТекущийПериод < ПланировщикПериодПо  + 24*3600 Цикл
		Планировщик.ТекущиеПериодыОтображения.Добавить(НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60), 
		НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60) + КоличествоРабочихЧасовВДне * 3600 - 1);
		Если (Не СубботаРабочий и ДеньНедели(пТекущийПериод) =6) или 
			(Не ВоскресеньеРабочий и ДеньНедели(пТекущийПериод) =7) Тогда
			ИнтервалФона = Планировщик.ИнтервалыФона.Добавить(НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60), 
			НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60) + КоличествоРабочихЧасовВДне * 3600-1) ;
			ИнтервалФона.Цвет = новый Цвет(255, 240, 240);
		ИначеЕсли (ПланировщикРежимОтображения = "Месяц" //или ПланировщикРежимОтображения = "По ресурсам - месяц"
			)  и Месяц(пТекущийПериод)%2 = 0 Тогда
			ИнтервалФона = Планировщик.ИнтервалыФона.Добавить(НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60), 
			НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60) + КоличествоРабочихЧасовВДне * 3600-1) ;
			ИнтервалФона.Цвет = новый Цвет(252, 252, 247);
			//ИначеЕсли (ПланировщикРежимОтображения = "По ресурсам - месяц")  и НеделяГода(пТекущийПериод)%2 = 0 Тогда
			//	ИнтервалФона = Планировщик.ИнтервалыФона.Добавить(НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60), 
			//						НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60) + КоличествоРабочихЧасовВДне * 3600-1) ;
			//	ИнтервалФона.Цвет = новый Цвет(248,248, 255);
		ИначеЕсли Не (ПланировщикРежимОтображения = "Месяц" или ПланировщикРежимОтображения = "По ресурсам - месяц") и ДеньНедели(пТекущийПериод)%2 = 0 Тогда//ПланировщикРежимОтображения = "Месяц" или ПланировщикРежимОтображения = "По ресурсам - месяц"  Тогда
			ИнтервалФона = Планировщик.ИнтервалыФона.Добавить(НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60), 
			НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60) + КоличествоРабочихЧасовВДне * 3600-1) ;
			ИнтервалФона.Цвет = новый Цвет(252, 252, 248);
		КонецЕсли;
		пТекущийПериод = пТекущийПериод + 24*3600;
	КонецЦикла;
	
	МассивДляОбходаИзмерений = Новый Массив;
	Планировщик.Измерения.Очистить();
	//Если ПланировщикОтображатьВРазрезеРесурсов = Истина Тогда
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	ЗапросФизЛиц();
	
	
	//// План-факт
	//     
	Планировщик.Элементы.Очистить();
	
	ЗапросЗадач();
	//// Элементы
	//
	
	///Перебор задач
	Для Каждого  стрЗадача из ТЗЗадачи Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		НачалоЗадачи 	=стрЗадача.ДатаС;
		ОкончанияЗадачи = стрЗадача.ДатаПО;
		Если НачалоЗадачи < ПланировщикПериодПо и ОкончанияЗадачи > ПланировщикПериодС Тогда
			НазваниеЗадачи  = стрЗадача.Заголовок;
			РесурсыЗадачи 	  = стрЗадача.Исполнитель;
			//		Если ПланировщикОтображатьВРазрезеРесурсов = Истина Тогда
			//			РесурсыЗадачиДляИзмерений 	  = ПолучитьСписокТрудовыхРесурсовЗадачи(НомерСтроки);
			//		Иначе 
			//			РесурсыЗадачиДляИзмерений 	  = Новый Массив;
			//		КонецЕсли;
			//		
			//		Если РесурсыЗадачиДляИзмерений.Количество() = 0 Тогда
			//			РесурсыЗадачиДляИзмерений.Добавить(Новый Структура("GUID_Ресурса", "<Без ресурсов>"));
			//		КонецЕсли;
			//		
			//		Описание 		  = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиОписание);
			//		
			//		Для Каждого ЭлементИзмерения из РесурсыЗадачиДляИзмерений Цикл
			//			
			//			НовыйЭлемент = Планировщик.Элементы.Добавить(НачалоЗадачи, ?(ОкончанияЗадачи = НачалоЗадачи, НачалоЗадачи + 3600, ОкончанияЗадачи));
			//						
			//			Если ПланировщикОтображатьВРазрезеРесурсов = Истина Тогда
			//				СоответствиеЗначений = Новый Соответствие;
			//				СоответствиеЗначений.Вставить("Ресурсы", ЭлементИзмерения.GUID_Ресурса);
			//				НовыйЭлемент.ЗначенияИзмерений  = Новый ФиксированноеСоответствие(СоответствиеЗначений);
			//			КонецЕсли;
			//			НовыйЭлемент.Значение = НомерСтроки;
			//			
			//			СформироватьНазваниеЗадачиИПодсказкуДляПланировщика(НомерСтроки, НовыйЭлемент, НазваниеЗадачи, РесурсыЗадачи, Описание);
			//			
			//			//Если ЭтоСуммирующаяЗадача(НомерСтроки) Тогда
			//			//	НовыйЭлемент.ЦветФона = ОсновнойЦветФонаСуммирующихЗадач; 
			//			//	НовыйЭлемент.ЦветТекста=ОсновнойЦветТекстаСуммирующихЗадач;
			//			//Иначе
			//			Если ПроцентЗавершения = 0 Тогда
			//				//НовыйЭлемент.Картинка = БиблиотекаКартинок.Задача;
			//			ИначеЕсли ПроцентЗавершения = 100 Тогда
			//				НовыйЭлемент.ЦветФона = ЦветФонаЗавершенныхЗадач; 
			//				НовыйЭлемент.ЦветТекста=ЦветТекстаЗавершенныхЗадач;
			//				Если Не (ПланировщикРежимОтображения = "По ресурсам - месяц" или 
			//				ПланировщикРежимОтображения = "По ресурсам - неделями") Тогда
			//					НовыйЭлемент.Картинка = БиблиотекаКартинок.ВыполнитьЗадачу;
			//				КонецЕсли;
			//			Иначе
			//				НовыйЭлемент.ЦветФона = ЦветФонаВыполняющихсяЗадач; 
			//				НовыйЭлемент.ЦветТекста=ЦветТекстаВыполняющихсяЗадач;
			//				Если Не (ПланировщикРежимОтображения = "По ресурсам - месяц" или 
			//				ПланировщикРежимОтображения = "По ресурсам - неделями") Тогда
			//					НовыйЭлемент.Картинка = БиблиотекаКартинок.СформироватьОтчет;
			//				КонецЕсли;
			//				
			//			КонецЕсли;
			//		КонецЦикла;
			//	КонецЕсли;
			
			
			
		КонецЕсли;			
		
	КонецЦикла;
	//Для НомерСтроки = 3 по ПоследняяСтрока Цикл
	//	НачалоЗадачи 	= ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиНачало);
	//	ОкончанияЗадачи = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиОкончание);
	//	
	//	Если НачалоЗадачи < ПланировщикПериодПо и ОкончанияЗадачи > ПланировщикПериодС и Не ЭтоСуммирующаяЗадача(НомерСтроки) Тогда
	//		НазваниеЗадачи  = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиНазвание);
	//		Веха 			  = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиВеха);
	//		
	//		Если Веха или (НачалоЗадачи = ОкончанияЗадачи) Тогда
	//			МеткаУжеЕсть = Ложь;
	//			Для Каждого Метка из ШкалаВремениДни.Метки Цикл
	//				Если Метка.Дата = НачалоЗадачи Тогда
	//					Метка.Текст		  = Метка.Текст + ", " + ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиНазвание);
	//					МеткаУжеЕсть = Истина;
	//					Прервать;
	//				КонецЕсли;
	//			КонецЦикла;
	//			
	//			Если МеткаУжеЕсть = Ложь Тогда
	//				Метка = ШкалаВремениДни.Метки.Добавить(НачалоЗадачи);
	//				Метка.Текст		  = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиНазвание);
	//				Метка.Расшифровка = Метка.Текст;
	//				Метка.ЦветТекста  = WebЦвета.Черный;
	//				Метка.ЦветЛинии   = WebЦвета.Черный;
	//			КонецЕсли;
	//			
	//			Если СтрДлина(Метка.Текст) > МаксимальнаяДлинаВехи Тогда
	//				Метка.Текст = СокрЛП(Лев(Метка.Текст,МаксимальнаяДлинаВехи)) + "...";
	//			КонецЕсли;
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		ПроцентЗавершения = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиПроцентЗавершения);
	//		РесурсыЗадачи 	  = ПолучитьСписокТрудовыхРесурсовЗадачи(НомерСтроки);
	//		Если ПланировщикОтображатьВРазрезеРесурсов = Истина Тогда
	//			РесурсыЗадачиДляИзмерений 	  = ПолучитьСписокТрудовыхРесурсовЗадачи(НомерСтроки);
	//		Иначе 
	//			РесурсыЗадачиДляИзмерений 	  = Новый Массив;
	//		КонецЕсли;
	//		
	//		Если РесурсыЗадачиДляИзмерений.Количество() = 0 Тогда
	//			РесурсыЗадачиДляИзмерений.Добавить(Новый Структура("GUID_Ресурса", "<Без ресурсов>"));
	//		КонецЕсли;
	//		
	//		Описание 		  = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиОписание);
	//		
	//		Для Каждого ЭлементИзмерения из РесурсыЗадачиДляИзмерений Цикл
	//			
	//			НовыйЭлемент = Планировщик.Элементы.Добавить(НачалоЗадачи, ?(ОкончанияЗадачи = НачалоЗадачи, НачалоЗадачи + 3600, ОкончанияЗадачи));
	//						
	//			Если ПланировщикОтображатьВРазрезеРесурсов = Истина Тогда
	//				СоответствиеЗначений = Новый Соответствие;
	//				СоответствиеЗначений.Вставить("Ресурсы", ЭлементИзмерения.GUID_Ресурса);
	//				НовыйЭлемент.ЗначенияИзмерений  = Новый ФиксированноеСоответствие(СоответствиеЗначений);
	//			КонецЕсли;
	//			НовыйЭлемент.Значение = НомерСтроки;
	//			
	//			СформироватьНазваниеЗадачиИПодсказкуДляПланировщика(НомерСтроки, НовыйЭлемент, НазваниеЗадачи, РесурсыЗадачи, Описание);
	//			
	//			//Если ЭтоСуммирующаяЗадача(НомерСтроки) Тогда
	//			//	НовыйЭлемент.ЦветФона = ОсновнойЦветФонаСуммирующихЗадач; 
	//			//	НовыйЭлемент.ЦветТекста=ОсновнойЦветТекстаСуммирующихЗадач;
	//			//Иначе
	//			Если ПроцентЗавершения = 0 Тогда
	//				//НовыйЭлемент.Картинка = БиблиотекаКартинок.Задача;
	//			ИначеЕсли ПроцентЗавершения = 100 Тогда
	//				НовыйЭлемент.ЦветФона = ЦветФонаЗавершенныхЗадач; 
	//				НовыйЭлемент.ЦветТекста=ЦветТекстаЗавершенныхЗадач;
	//				Если Не (ПланировщикРежимОтображения = "По ресурсам - месяц" или 
	//				ПланировщикРежимОтображения = "По ресурсам - неделями") Тогда
	//					НовыйЭлемент.Картинка = БиблиотекаКартинок.ВыполнитьЗадачу;
	//				КонецЕсли;
	//			Иначе
	//				НовыйЭлемент.ЦветФона = ЦветФонаВыполняющихсяЗадач; 
	//				НовыйЭлемент.ЦветТекста=ЦветТекстаВыполняющихсяЗадач;
	//				Если Не (ПланировщикРежимОтображения = "По ресурсам - месяц" или 
	//				ПланировщикРежимОтображения = "По ресурсам - неделями") Тогда
	//					НовыйЭлемент.Картинка = БиблиотекаКартинок.СформироватьОтчет;
	//				КонецЕсли;
	//				
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЦикла;
КонецПроцедуры



&НаСервере
Процедура  ЗапросФизЛиц()
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Сиська
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ВыполняетРаботы";
	
	Измерения =  Планировщик.Измерения.Добавить("Ресурсы");			
	
	Для Каждого  ВыборкаДетальныеЗаписи из Запрос.Выполнить().Выгрузить() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ЭлементИзмеренеия = Измерения.Элементы.Добавить(ВыборкаДетальныеЗаписи.Сиська);
		ЭлементИзмеренеия.Текст = Лев(Строка(ВыборкаДетальныеЗаписи.Сиська) + "                        ", 22);
		//МассивДляОбходаИзмерений.Добавить(Строка(ВыборкаДетальныеЗаписи.Сиська) );
		
	КонецЦикла;
	
	
КонецПроцедуры


&НаСервере
Процедура  ЗапросЗадач()
	ЭлементыПланировщика = Планировщик.Элементы;
	ЭлементыПланировщика.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Разрешенные
	|	ОбращениеВПоддержку.ТекущийИсполнитель КАК Исполнитель,
	|	ОбращениеВПоддержку.Ссылка КАК Задача,
	|	ОбращениеВПоддержку.ДатаНачалаПлан КАК ДатаС,
	|	ОбращениеВПоддержку.ДатаОкончанияПлан КАК ДатаПо,
	|	ОбращениеВПоддержку.Заголовок
	|ИЗ
	|	Документ.ОбращениеВПоддержку КАК ОбращениеВПоддержку
	|ГДЕ
	|	(ОбращениеВПоддержку.ДатаНачалаПлан МЕЖДУ &ДатаС И &ДатаПо
	|			ИЛИ ОбращениеВПоддержку.ДатаОкончанияПлан МЕЖДУ &ДатаС И &ДатаПо)";
	
	Запрос.УстановитьПараметр("ДатаС",	ПланировщикПериодС);
	Запрос.УстановитьПараметр("ДатаПо", ПланировщикПериодПо);
	
	Для Каждого стрЗадача из Запрос.Выполнить().Выгрузить()      Цикл
		//НачалоЗадачи 	=стрЗадача.ДатаС;
		//ОкончанияЗадачи = стрЗадача.ДатаПО;
		//Если НачалоЗадачи < ПланировщикПериодПо и ОкончанияЗадачи > ПланировщикПериодС Тогда
		//	НазваниеЗадачи  = стрЗадача.Заголовок;
		//	РесурсыЗадачи 	  = стрЗадача.Исполнитель;
		//КонецЕсли;
		СоответствиеЗначений = Новый Соответствие;
		СоответствиеЗначений.Вставить("Ресурсы",	стрЗадача.Исполнитель);
		
		// Добавление новой записи в промежуток времени
		НовыйЭлемент = ЭлементыПланировщика.Добавить(стрЗадача.ДатаС, стрЗадача.ДатаПо);
		НовыйЭлемент.ЗначенияИзмерений	= Новый ФиксированноеСоответствие(СоответствиеЗначений);
		НовыйЭлемент.Текст				= стрЗадача.Заголовок;
		НовыйЭлемент.Значение           = стрЗадача.Задача;
		Если НовыйЭлемент.Значение.ТекущийСтатус = Справочники.Статусы.Новое  Тогда
			//НовыйЭлемент.Картинка = БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйЭлемент.Картинка = БиблиотекаКартинок.СформироватьОтчет;

		ИначеЕсли   НовыйЭлемент.Значение.ТекущийСтатус = Справочники.Статусы.Выполнено  Тогда
				НовыйЭлемент.Картинка = БиблиотекаКартинок.ВыполнитьЗадачу;

			//НовыйЭлемент.Картинка = БиблиотекаКартинок.СформироватьОтчет;
		КонецЕсли;
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦветаОтделов.Цвет
		|ИЗ
		|	РегистрСведений.ЦветаОтделов КАК ЦветаОтделов
		|ГДЕ
		|	ЦветаОтделов.Отдел = &Отдел";
	
	Запрос.УстановитьПараметр("Отдел", стрЗадача.Задача.ОбращениеОт);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		НовыйЭлемент.ЦветФона = WebЦвета[ВыборкаДетальныеЗаписи.Цвет];
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	КонецЦикла;
	
	
	// Вставить обработку выборки ВыборкаДетальныеЗаписи
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	СсылкаНаДок = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	
	Ключ = Новый Структура("Ключ", СсылкаНаДок);
	форма = ПолучитьФорму("Документ.ОбращениеВПоддержку.Форма.ФормаДокумента", Ключ);    
	форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	// Вставить содержимое обработчика.
	ЭлементПланировщика = Элементы.Планировщик.ВыделенныеЭлементы[0];
	СсылкаНаЗадачу = ЭлементПланировщика.Значение;
	Для Каждого Стр из ЭлементПланировщика.ЗначенияИзмерений     Цикл
		Исполнитель = Стр.Значение ;
	КонецЦикла;	
	ПоменятьЗадачу(СсылкаНаЗадачу,ЭлементПланировщика.Начало,ЭлементПланировщика.Конец,ЭлементПланировщика.Текст,Исполнитель);
	
	ЭлементПланировщика.Значение =СсылкаНаЗадачу; 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НастроитьПланировщик();
	//ПолныеПраваПланировщик =  ЕстьЛиПравоМенятьПланировщик();
	Элементы.Планировщик.Доступность  = ЕстьЛиПравоМенятьПланировщик();
КонецПроцедуры


&НаСервере
Процедура ПоменятьЗадачу(Задача,ДатаС,ДатаПо,ТекстЗадачи,Исполнитель)
	
	задач =1;
	Если Задача = Неопределено Тогда
		ДокСсылка = Документы.ОбращениеВПоддержку.СоздатьДокумент();
		ДокСсылка.Дата = ТекущаяДата();
	НоваяСтр =	ДокСсылка.Исполнители.Добавить();
	НоваяСтр.Исполнитель =  Исполнитель;  
	
	ДокСсылка.Автор  = ПараметрыСеанса.ТекущийПользователь;
	ДокСсылка.Важность = Перечисления.ВидВажности.Обычная;

	НоваяСтр.Дата =ТекущаяДата();
	НоваяСтр.Категория = Справочники.Категории.НеОпределена;
	ДокСсылка.Описание = ТекстЗадачи;				
		СтатусНовое = Справочники.Статусы.Новое;
		НоваяСтрока = ДокСсылка.Статусы.Добавить();
		НоваяСтрока.Дата = ТекущаяДата();
		НоваяСтрока.Статус = СтатусНовое;
		НоваяСтрока.Добавил = ПараметрыСеанса.ТекущийПользователь;
		ДокСсылка.ТекущийСтатус = СтатусНовое;

	Иначе
		ДокСсылка = Задача.ПолучитьОбъект();
	КонецЕсли;
	ДокСсылка.ТекущийИсполнитель = Исполнитель;
	ДокСсылка.Заголовок = ТекстЗадачи;
	ДокСсылка.ДатаНачалаПлан =ДатаС; 
	ДокСсылка.ДатаОкончанияПлан =ДатаПо; 
	ДокСсылка.Записать(РежимЗаписиДокумента.Запись);
	Задача =ДокСсылка.ссылка; 	
КонецПроцедуры	

&НаКлиенте
Процедура ПланировщикПериодНазад(Команда)
	// Вставить содержимое обработчика.
	ПланировщикПериодС  = НачалоНедели(НачалоНедели(ПланировщикПериодС)-1);
	ПланировщикПериодПо = ПланировщикПериодПо - (7 * 24*3600);
	НастроитьПланировщик() ;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПериодВперед(Команда)
	// Вставить содержимое обработчика.
	ПланировщикПериодС  = КонецНедели(ПланировщикПериодС)+1;
	ПланировщикПериодПо = ПланировщикПериодПо + (7 * 24*3600);
	НастроитьПланировщик();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика
	 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ  разрешенные
		|	ЦветаОтделов.Отдел,
		|	ЦветаОтделов.Цвет
		|ИЗ
		|	РегистрСведений.ЦветаОтделов КАК ЦветаОтделов";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	 а=1;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	 Кмд = ЭтаФорма.Команды.Добавить("ЦветаОтделов"+а);
     Кмд.Действие = "Тест";
     Кмд.Заголовок = ВыборкаДетальныеЗаписи.Отдел;
 
     //Добавляем саму кнопку
     Элемент = ЭтаФорма.Элементы.Добавить("ЦветаОтделов"+а, Тип("КнопкаФормы"), ЭтаФорма.Элементы.ГруппаЛегенда);
     Элемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
     Элемент.ИмяКоманды = "ЦветаОтделов"+а; 
	 Элемент.ЦветФона = WebЦвета[ВыборкаДетальныеЗаписи.цвет];
	 //Элемент.Родитель = ЭтаФорма.Элементы.ГруппаЛегенда;
	 а=а+1;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПериодВпередДень(Команда)
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
	ПланировщикПериодС  = ПланировщикПериодС+24*3600;
	ПланировщикПериодПо = ПланировщикПериодПо+24*3600;
	НастроитьПланировщик() ;

КонецПроцедуры

&НаСервере
Функция  ЕстьЛиПравоМенятьПланировщик()

Возврат 	РольДоступна("ИсполнениеОбращений");
	
	
КонецФункции	
&НаКлиенте
Процедура ПланировщикПериодНазадДень(Команда)
	// Вставить содержимое обработчика.  	ПланировщикПериодС  = ПланировщикПериодС+24*3600;
	ПланировщикПериодС  = ПланировщикПериодС-24*3600;
	ПланировщикПериодПо = ПланировщикПериодПо-24*3600;
	НастроитьПланировщик() ;

КонецПроцедуры
