
&НаКлиенте
Процедура Обновить(Команда)
	// Вставить содержимое обработчика.
	НастроитьПланировщик();
КонецПроцедуры


&НаКлиенте
Процедура НастроитьПланировщик()
	
	ПланировщикОтображатьНеРабочиеДни = Истина;
	КоличествоРабочихЧасовВДне = 8;
	НачалоРабочегоДня =  '00010101090000';
	Если не ЗначениеЗаполнено(ПланировщикПериодС) Тогда 
		ПланировщикПериодС  = НачалоДня(ТекущаяДата());
		ПланировщикПериодПо = (ПланировщикПериодС + 7*24*3600)-1;
 	КонецЕсли;

	СубботаРабочий =Ложь;
	ВоскресеньеРабочий = Ложь;
	//ПланировщикРежимОтображения= "Две недели";
	
	Если Не ЗначениеЗаполнено(ПланировщикРежимОтображения) Тогда
		ПланировщикРежимОтображения = "Неделя";
		ПланировщикПериодПо = (ПланировщикПериодС + 7*24*3600)-1;
	КонецЕсли;
	
	Планировщик.ШкалаВремени.Элементы[0].Метки.Очистить();
	Планировщик.ШкалаВремени.Элементы[1].Метки.Очистить();
	Планировщик.ШкалаВремени.Элементы[3].Метки.Очистить();
	
	Если ПланировщикРежимОтображения = "По ресурсам - месяц" Тогда
		//ПланировщикПериодС = НачалоМесяца(ПланировщикПериодС);
		//ПланировщикПериодПо = КонецМесяца(ПланировщикПериодПо);
		ПланировщикОтображатьВРазрезеРесурсов = Истина;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Месяц;
		Планировщик.КратностьПериодическогоВарианта = 1;
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Видимость = Ложь;
		Планировщик.ШкалаВремени.Элементы[1].Видимость = Истина;
		Планировщик.ШкалаВремени.Элементы[2].Видимость = Ложь;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='MMMM yyyy ""г.""'";
		ШкалаВремениДни = Планировщик.ШкалаВремени.Элементы[1];
		МаксимальнаяДлинаВехи = 20;
	ИначеЕсли ПланировщикРежимОтображения = "По ресурсам - неделями" Тогда
		ПланировщикОтображатьВРазрезеРесурсов = Истина;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Неделя;
		Планировщик.КратностьПериодическогоВарианта = 1;
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Видимость = Истина;
		Планировщик.ШкалаВремени.Элементы[1].Видимость = Ложь;
		Планировщик.ШкалаВремени.Элементы[2].Видимость = Истина;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dd.MM.yyyy ""г.""'";
		ШкалаВремениДни = Планировщик.ШкалаВремени.Элементы[0];
		МаксимальнаяДлинаВехи = 40;
	ИначеЕсли ПланировщикРежимОтображения = "День" Тогда
		ПланировщикОтображатьВРазрезеРесурсов = Истина;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Неделя;
		Планировщик.КратностьПериодическогоВарианта = 1;
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Видимость = Истина;
		Планировщик.ШкалаВремени.Элементы[1].Видимость = Ложь;
		Планировщик.ШкалаВремени.Элементы[2].Видимость = Истина;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dd.MM.yyyy ""г.""'";
		ШкалаВремениДни = Планировщик.ШкалаВремени.Элементы[0];
		МаксимальнаяДлинаВехи = 40;
	ИначеЕсли ПланировщикРежимОтображения = "Два дня" Тогда
		ПланировщикОтображатьВРазрезеРесурсов = Истина;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Неделя;
		Планировщик.КратностьПериодическогоВарианта = 1;
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Видимость = Истина;
		Планировщик.ШкалаВремени.Элементы[1].Видимость = Ложь;
		Планировщик.ШкалаВремени.Элементы[2].Видимость = Истина;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dd.MM.yyyy ""г.""'";
		ШкалаВремениДни = Планировщик.ШкалаВремени.Элементы[0];
		МаксимальнаяДлинаВехи = 40;
	ИначеЕсли ПланировщикРежимОтображения = "Неделя" Тогда
		ПланировщикОтображатьВРазрезеРесурсов = Истина;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Неделя;
		Планировщик.КратностьПериодическогоВарианта = 1;
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Видимость = Истина;
		Планировщик.ШкалаВремени.Элементы[1].Видимость = Ложь;
		Планировщик.ШкалаВремени.Элементы[2].Видимость = Истина;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dd.MM.yyyy ""г.""'";
		ШкалаВремениДни = Планировщик.ШкалаВремени.Элементы[0];
		МаксимальнаяДлинаВехи = 40;
	ИначеЕсли ПланировщикРежимОтображения = "Месяц" Тогда
		//ПланировщикПериодС = НачалоНедели(ПланировщикПериодС);
		//ПланировщикПериодПо = КонецНедели(КонецМесяца(ПланировщикПериодС));
		ПланировщикОтображатьВРазрезеРесурсов = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта = 7;
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		Планировщик.ШкалаВремени.Элементы[0].Видимость = ЛОжь;
		Планировщик.ШкалаВремени.Элементы[1].Видимость = Истина;
		Планировщик.ШкалаВремени.Элементы[2].Видимость = Ложь;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ=' '";
		ШкалаВремениДни = Планировщик.ШкалаВремени.Элементы[3];
		МаксимальнаяДлинаВехи = 40;
	КонецЕсли;
	
	Планировщик.НачалоПериодаОтображения = НачалоДня(ПланировщикПериодС) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60);
	Планировщик.КонецПериодаОтображения  = НачалоДня(ПланировщикПериодПо) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60) + КоличествоРабочихЧасовВДне * 3600 - 1;
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	//Планировщик.ТекущиеПериодыОтображения.Добавить(НачалоДня(ПланировщикПериодС) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60), 
	//			НачалоДня(ПланировщикПериодПо) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60) + КоличествоРабочихЧасовВДне * 3600);
	
	
	пТекущийПериод = ПланировщикПериодС;
	Планировщик.ИнтервалыФона.Очистить();
	Пока пТекущийПериод < ПланировщикПериодПо  + 24*3600 Цикл
		Планировщик.ТекущиеПериодыОтображения.Добавить(НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60), 
		НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60) + КоличествоРабочихЧасовВДне * 3600 - 1);
		Если (Не СубботаРабочий и ДеньНедели(пТекущийПериод) =6) или 
			(Не ВоскресеньеРабочий и ДеньНедели(пТекущийПериод) =7) Тогда
			ИнтервалФона = Планировщик.ИнтервалыФона.Добавить(НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60), 
			НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60) + КоличествоРабочихЧасовВДне * 3600-1) ;
			ИнтервалФона.Цвет = новый Цвет(255, 240, 240);
		ИначеЕсли (ПланировщикРежимОтображения = "Месяц" //или ПланировщикРежимОтображения = "По ресурсам - месяц"
			)  и Месяц(пТекущийПериод)%2 = 0 Тогда
			ИнтервалФона = Планировщик.ИнтервалыФона.Добавить(НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60), 
			НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60) + КоличествоРабочихЧасовВДне * 3600-1) ;
			ИнтервалФона.Цвет = новый Цвет(252, 252, 247);
			//ИначеЕсли (ПланировщикРежимОтображения = "По ресурсам - месяц")  и НеделяГода(пТекущийПериод)%2 = 0 Тогда
			//	ИнтервалФона = Планировщик.ИнтервалыФона.Добавить(НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60), 
			//						НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60) + КоличествоРабочихЧасовВДне * 3600-1) ;
			//	ИнтервалФона.Цвет = новый Цвет(248,248, 255);
		ИначеЕсли Не (ПланировщикРежимОтображения = "Месяц" или ПланировщикРежимОтображения = "По ресурсам - месяц") и ДеньНедели(пТекущийПериод)%2 = 0 Тогда//ПланировщикРежимОтображения = "Месяц" или ПланировщикРежимОтображения = "По ресурсам - месяц"  Тогда
			ИнтервалФона = Планировщик.ИнтервалыФона.Добавить(НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60), 
			НачалоДня(пТекущийПериод) + (Час(НачалоРабочегоДня) * 3600) + (Минута(НачалоРабочегоДня) * 60) + КоличествоРабочихЧасовВДне * 3600-1) ;
			ИнтервалФона.Цвет = новый Цвет(252, 252, 248);
		КонецЕсли;
		пТекущийПериод = пТекущийПериод + 24*3600;
	КонецЦикла;
	
	МассивДляОбходаИзмерений = Новый Массив;
	Планировщик.Измерения.Очистить();
	//Если ПланировщикОтображатьВРазрезеРесурсов = Истина Тогда
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	ЗапросФизЛиц();
	
	
	//// План-факт
	//     
	Планировщик.Элементы.Очистить();
	
	ЗапросЗадач();
	//// Элементы
	//
	
	///Перебор задач
	Для Каждого  стрЗадача из ТЗЗадачи Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		НачалоЗадачи 	=стрЗадача.ДатаС;
		ОкончанияЗадачи = стрЗадача.ДатаПО;
		Если НачалоЗадачи < ПланировщикПериодПо и ОкончанияЗадачи > ПланировщикПериодС Тогда
			НазваниеЗадачи  = стрЗадача.Заголовок;
			РесурсыЗадачи 	  = стрЗадача.Исполнитель;
			//		Если ПланировщикОтображатьВРазрезеРесурсов = Истина Тогда
			//			РесурсыЗадачиДляИзмерений 	  = ПолучитьСписокТрудовыхРесурсовЗадачи(НомерСтроки);
			//		Иначе 
			//			РесурсыЗадачиДляИзмерений 	  = Новый Массив;
			//		КонецЕсли;
			//		
			//		Если РесурсыЗадачиДляИзмерений.Количество() = 0 Тогда
			//			РесурсыЗадачиДляИзмерений.Добавить(Новый Структура("GUID_Ресурса", "<Без ресурсов>"));
			//		КонецЕсли;
			//		
			//		Описание 		  = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиОписание);
			//		
			//		Для Каждого ЭлементИзмерения из РесурсыЗадачиДляИзмерений Цикл
			//			
			//			НовыйЭлемент = Планировщик.Элементы.Добавить(НачалоЗадачи, ?(ОкончанияЗадачи = НачалоЗадачи, НачалоЗадачи + 3600, ОкончанияЗадачи));
			//						
			//			Если ПланировщикОтображатьВРазрезеРесурсов = Истина Тогда
			//				СоответствиеЗначений = Новый Соответствие;
			//				СоответствиеЗначений.Вставить("Ресурсы", ЭлементИзмерения.GUID_Ресурса);
			//				НовыйЭлемент.ЗначенияИзмерений  = Новый ФиксированноеСоответствие(СоответствиеЗначений);
			//			КонецЕсли;
			//			НовыйЭлемент.Значение = НомерСтроки;
			//			
			//			СформироватьНазваниеЗадачиИПодсказкуДляПланировщика(НомерСтроки, НовыйЭлемент, НазваниеЗадачи, РесурсыЗадачи, Описание);
			//			
			//			//Если ЭтоСуммирующаяЗадача(НомерСтроки) Тогда
			//			//	НовыйЭлемент.ЦветФона = ОсновнойЦветФонаСуммирующихЗадач; 
			//			//	НовыйЭлемент.ЦветТекста=ОсновнойЦветТекстаСуммирующихЗадач;
			//			//Иначе
			//			Если ПроцентЗавершения = 0 Тогда
			//				//НовыйЭлемент.Картинка = БиблиотекаКартинок.Задача;
			//			ИначеЕсли ПроцентЗавершения = 100 Тогда
			//				НовыйЭлемент.ЦветФона = ЦветФонаЗавершенныхЗадач; 
			//				НовыйЭлемент.ЦветТекста=ЦветТекстаЗавершенныхЗадач;
			//				Если Не (ПланировщикРежимОтображения = "По ресурсам - месяц" или 
			//				ПланировщикРежимОтображения = "По ресурсам - неделями") Тогда
			//					НовыйЭлемент.Картинка = БиблиотекаКартинок.ВыполнитьЗадачу;
			//				КонецЕсли;
			//			Иначе
			//				НовыйЭлемент.ЦветФона = ЦветФонаВыполняющихсяЗадач; 
			//				НовыйЭлемент.ЦветТекста=ЦветТекстаВыполняющихсяЗадач;
			//				Если Не (ПланировщикРежимОтображения = "По ресурсам - месяц" или 
			//				ПланировщикРежимОтображения = "По ресурсам - неделями") Тогда
			//					НовыйЭлемент.Картинка = БиблиотекаКартинок.СформироватьОтчет;
			//				КонецЕсли;
			//				
			//			КонецЕсли;
			//		КонецЦикла;
			//	КонецЕсли;
			
			
			
		КонецЕсли;			
		
	КонецЦикла;
	//Для НомерСтроки = 3 по ПоследняяСтрока Цикл
	//	НачалоЗадачи 	= ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиНачало);
	//	ОкончанияЗадачи = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиОкончание);
	//	
	//	Если НачалоЗадачи < ПланировщикПериодПо и ОкончанияЗадачи > ПланировщикПериодС и Не ЭтоСуммирующаяЗадача(НомерСтроки) Тогда
	//		НазваниеЗадачи  = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиНазвание);
	//		Веха 			  = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиВеха);
	//		
	//		Если Веха или (НачалоЗадачи = ОкончанияЗадачи) Тогда
	//			МеткаУжеЕсть = Ложь;
	//			Для Каждого Метка из ШкалаВремениДни.Метки Цикл
	//				Если Метка.Дата = НачалоЗадачи Тогда
	//					Метка.Текст		  = Метка.Текст + ", " + ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиНазвание);
	//					МеткаУжеЕсть = Истина;
	//					Прервать;
	//				КонецЕсли;
	//			КонецЦикла;
	//			
	//			Если МеткаУжеЕсть = Ложь Тогда
	//				Метка = ШкалаВремениДни.Метки.Добавить(НачалоЗадачи);
	//				Метка.Текст		  = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиНазвание);
	//				Метка.Расшифровка = Метка.Текст;
	//				Метка.ЦветТекста  = WebЦвета.Черный;
	//				Метка.ЦветЛинии   = WebЦвета.Черный;
	//			КонецЕсли;
	//			
	//			Если СтрДлина(Метка.Текст) > МаксимальнаяДлинаВехи Тогда
	//				Метка.Текст = СокрЛП(Лев(Метка.Текст,МаксимальнаяДлинаВехи)) + "...";
	//			КонецЕсли;
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		ПроцентЗавершения = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиПроцентЗавершения);
	//		РесурсыЗадачи 	  = ПолучитьСписокТрудовыхРесурсовЗадачи(НомерСтроки);
	//		Если ПланировщикОтображатьВРазрезеРесурсов = Истина Тогда
	//			РесурсыЗадачиДляИзмерений 	  = ПолучитьСписокТрудовыхРесурсовЗадачи(НомерСтроки);
	//		Иначе 
	//			РесурсыЗадачиДляИзмерений 	  = Новый Массив;
	//		КонецЕсли;
	//		
	//		Если РесурсыЗадачиДляИзмерений.Количество() = 0 Тогда
	//			РесурсыЗадачиДляИзмерений.Добавить(Новый Структура("GUID_Ресурса", "<Без ресурсов>"));
	//		КонецЕсли;
	//		
	//		Описание 		  = ПолучитьЗначениеПоКолонке(НомерСтроки, НомерКолонкиОписание);
	//		
	//		Для Каждого ЭлементИзмерения из РесурсыЗадачиДляИзмерений Цикл
	//			
	//			НовыйЭлемент = Планировщик.Элементы.Добавить(НачалоЗадачи, ?(ОкончанияЗадачи = НачалоЗадачи, НачалоЗадачи + 3600, ОкончанияЗадачи));
	//						
	//			Если ПланировщикОтображатьВРазрезеРесурсов = Истина Тогда
	//				СоответствиеЗначений = Новый Соответствие;
	//				СоответствиеЗначений.Вставить("Ресурсы", ЭлементИзмерения.GUID_Ресурса);
	//				НовыйЭлемент.ЗначенияИзмерений  = Новый ФиксированноеСоответствие(СоответствиеЗначений);
	//			КонецЕсли;
	//			НовыйЭлемент.Значение = НомерСтроки;
	//			
	//			СформироватьНазваниеЗадачиИПодсказкуДляПланировщика(НомерСтроки, НовыйЭлемент, НазваниеЗадачи, РесурсыЗадачи, Описание);
	//			
	//			//Если ЭтоСуммирующаяЗадача(НомерСтроки) Тогда
	//			//	НовыйЭлемент.ЦветФона = ОсновнойЦветФонаСуммирующихЗадач; 
	//			//	НовыйЭлемент.ЦветТекста=ОсновнойЦветТекстаСуммирующихЗадач;
	//			//Иначе
	//			Если ПроцентЗавершения = 0 Тогда
	//				//НовыйЭлемент.Картинка = БиблиотекаКартинок.Задача;
	//			ИначеЕсли ПроцентЗавершения = 100 Тогда
	//				НовыйЭлемент.ЦветФона = ЦветФонаЗавершенныхЗадач; 
	//				НовыйЭлемент.ЦветТекста=ЦветТекстаЗавершенныхЗадач;
	//				Если Не (ПланировщикРежимОтображения = "По ресурсам - месяц" или 
	//				ПланировщикРежимОтображения = "По ресурсам - неделями") Тогда
	//					НовыйЭлемент.Картинка = БиблиотекаКартинок.ВыполнитьЗадачу;
	//				КонецЕсли;
	//			Иначе
	//				НовыйЭлемент.ЦветФона = ЦветФонаВыполняющихсяЗадач; 
	//				НовыйЭлемент.ЦветТекста=ЦветТекстаВыполняющихсяЗадач;
	//				Если Не (ПланировщикРежимОтображения = "По ресурсам - месяц" или 
	//				ПланировщикРежимОтображения = "По ресурсам - неделями") Тогда
	//					НовыйЭлемент.Картинка = БиблиотекаКартинок.СформироватьОтчет;
	//				КонецЕсли;
	//				
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЦикла;
КонецПроцедуры



&НаСервере
Процедура  ЗапросФизЛиц()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка КАК Сиська
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ВыполняетРаботы";
	
	Измерения =  Планировщик.Измерения.Добавить("Ресурсы");			
	
	Для Каждого  ВыборкаДетальныеЗаписи из Запрос.Выполнить().Выгрузить() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ЭлементИзмеренеия = Измерения.Элементы.Добавить(ВыборкаДетальныеЗаписи.Сиська);
		ЭлементИзмеренеия.Текст = Лев(Строка(ВыборкаДетальныеЗаписи.Сиська) + "                        ", 22);
		//МассивДляОбходаИзмерений.Добавить(Строка(ВыборкаДетальныеЗаписи.Сиська) );
		
	КонецЦикла;
	
	
КонецПроцедуры


&НаСервере
Процедура  ЗапросЗадач()
	ЭлементыПланировщика = Планировщик.Элементы;
	ЭлементыПланировщика.Очистить();
	
	ИмяТабЧасти = ?(РеальныеИсполнители, "РеальныйПланВыполнения", "ДетализированыйПланВыполнения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ?(РеальныеИсполнители, "
	|	ПериодыДокумента.Ссылка.РеальныйИсполнитель КАК Исполнитель,", "
	|	ПериодыДокумента.Ссылка.ТекущийИсполнитель КАК Исполнитель, ") + "
	|	ПериодыДокумента.Ссылка КАК Задача,
	|	ПериодыДокумента.ДатаНачала КАК ДатаС,
	|	ПериодыДокумента.ДатаОкончания КАК ДатаПо,
	|	ПериодыДокумента.Ссылка.Заголовок КАК Заголовок,
	|	ПериодыДокумента.НомерСтроки КАК НомерПериода
	|ИЗ
	|	Документ.ОбращениеВПоддержку."+ИмяТабЧасти+" КАК ПериодыДокумента
	|ГДЕ
	|	НЕ ПериодыДокумента.Ссылка.ТекущийСтатус = ЗНАЧЕНИЕ(Справочник.Статусы.Закрыто)
	|	И НЕ ПериодыДокумента.Ссылка.ПометкаУдаления
	|	И (ПериодыДокумента.ДатаНачала МЕЖДУ &ДатаС И &ДатаПо
	|			ИЛИ ПериодыДокумента.ДатаОкончания МЕЖДУ &ДатаС И &ДатаПо
	|			ИЛИ &ДатаС МЕЖДУ ПериодыДокумента.ДатаНачала И ПериодыДокумента.ДатаОкончания
	|			ИЛИ &ДатаПо МЕЖДУ ПериодыДокумента.ДатаНачала И ПериодыДокумента.ДатаОкончания)";

	Если РеальныеИсполнители Тогда        //Марц
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ДатаНачалаПлан","прогДатаНачалаПлан");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ДатаОкончанияПлан","прогДатаОкончанияПлан");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаС",	ПланировщикПериодС);
	Запрос.УстановитьПараметр("ДатаПо", КонецДня(ПланировщикПериодПо));
	
	Для Каждого стрЗадача из Запрос.Выполнить().Выгрузить()      Цикл
		//НачалоЗадачи 	=стрЗадача.ДатаС;
		//ОкончанияЗадачи = стрЗадача.ДатаПО;
		//Если НачалоЗадачи < ПланировщикПериодПо и ОкончанияЗадачи > ПланировщикПериодС Тогда
		//	НазваниеЗадачи  = стрЗадача.Заголовок;
		//	РесурсыЗадачи 	  = стрЗадача.Исполнитель;
		//КонецЕсли;
		СоответствиеЗначений = Новый Соответствие;
		СоответствиеЗначений.Вставить("Ресурсы",		стрЗадача.Исполнитель);
		СоответствиеЗначений.Вставить("Исполнитель",	стрЗадача.Исполнитель);
		СоответствиеЗначений.Вставить("НомерПериода",	стрЗадача.НомерПериода);
		
		КличествоПериодовЗадачи = стрЗадача.Задача.ДетализированыйПланВыполнения.Количество();
		// Добавление новой записи в промежуток времени
		НовыйЭлемент = ЭлементыПланировщика.Добавить(стрЗадача.ДатаС, стрЗадача.ДатаПо);
		НовыйЭлемент.ЗначенияИзмерений	= Новый ФиксированноеСоответствие(СоответствиеЗначений);
		НовыйЭлемент.Текст				= стрЗадача.Заголовок + ?(КличествоПериодовЗадачи <= 1, "", Символы.ПС + "Период - " + стрЗадача.НомерПериода);
		НовыйЭлемент.Значение           = стрЗадача.Задача;
		Если НовыйЭлемент.Значение.ТекущийСтатус = Справочники.Статусы.Новое  Тогда
			//НовыйЭлемент.Картинка = БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйЭлемент.Картинка = БиблиотекаКартинок.СформироватьОтчет;

		ИначеЕсли   НовыйЭлемент.Значение.ТекущийСтатус = Справочники.Статусы.Выполнено  Тогда
				НовыйЭлемент.Картинка = БиблиотекаКартинок.ВыполнитьЗадачу;

			//НовыйЭлемент.Картинка = БиблиотекаКартинок.СформироватьОтчет;
		КонецЕсли;
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦветаОтделов.Цвет
		|ИЗ
		|	РегистрСведений.ЦветаОтделов КАК ЦветаОтделов
		|ГДЕ
		|	ЦветаОтделов.Отдел = &Отдел";
	
	Запрос.УстановитьПараметр("Отдел", стрЗадача.Задача.ОбращениеОт);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		НовыйЭлемент.ЦветФона = WebЦвета[ВыборкаДетальныеЗаписи.Цвет];
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	КонецЦикла;
	
	
	// Вставить обработку выборки ВыборкаДетальныеЗаписи
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	СсылкаНаДок = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	
	Ключ = Новый Структура("Ключ", СсылкаНаДок);
	Оповещение = Новый ОписаниеОповещения("ОбновитьПриЗавершенииРедактирования", ЭтотОбъект); 
	ОткрытьФорму("Документ.ОбращениеВПоддержку.Форма.ФормаДокумента", Ключ, Элемент,,,,Оповещение);    
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	// Вставить содержимое обработчика.
	ЭлементПланировщика = Элементы.Планировщик.ВыделенныеЭлементы[0];
	СсылкаНаЗадачу = ЭлементПланировщика.Значение;
	Исполнитель = ЭлементПланировщика.ЗначенияИзмерений.Получить("Исполнитель");
	НомерПериода = ЭлементПланировщика.ЗначенияИзмерений.Получить("НомерПериода"); 
	
	Если Исполнитель = Неопределено Тогда
		Исполнитель = ЭлементПланировщика.ЗначенияИзмерений.Получить("Ресурсы");
	КонецЕсли;
	
	Если НомерПериода = Неопределено Тогда
		Позиция = Найти(ЭлементПланировщика.Текст, "Период - ");
		Если Позиция Тогда
			ПериодТекст = Сред(ЭлементПланировщика.Текст, Позиция);
			Позиция = Найти(ПериодТекст, "- ");
			НомерПериода = Число(Сред(ПериодТекст,Позиция+2));
		Иначе
			НомерПериода = 1; 
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПланировщик = Ложь;
	
	ОбновитьПланировщик = ПоменятьЗадачу(СсылкаНаЗадачу,ЭлементПланировщика.Начало,ЭлементПланировщика.Конец,ЭлементПланировщика.Текст, Исполнитель, НомерПериода);
	
	Если ЭлементПланировщика.Значение = Неопределено Тогда
		ЭлементПланировщика.Значение = СсылкаНаЗадачу; 
		СоответствиеЗначений = Новый Соответствие;
		СоответствиеЗначений.Вставить("Ресурсы",		Исполнитель);
		СоответствиеЗначений.Вставить("Исполнитель",	Исполнитель);
		СоответствиеЗначений.Вставить("НомерПериода",	НомерПериода);
		
		ЭлементПланировщика.ЗначенияИзмерений	= Новый ФиксированноеСоответствие(СоответствиеЗначений);
	КонецЕсли;
	
	Если ОбновитьПланировщик Тогда
		НастроитьПланировщик();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если ВебКлиент Тогда
		Отказ = Истина;
		Возврат;
	#КонецЕсли
	
	НастроитьПланировщик();
	//ПолныеПраваПланировщик =  ЕстьЛиПравоМенятьПланировщик();
	Элементы.Планировщик.Доступность  = ЕстьЛиПравоМенятьПланировщик();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере(ДокСсылка,ДатаС,ДатаПо,Исполнитель)
	
	ДокСсылка.Дата = ТекущаяДата();
	НоваяСтр =	ДокСсылка.Исполнители.Добавить();
	НоваяСтр.Исполнитель =  Исполнитель;  
	
	ДокСсылка.Важность = Перечисления.ВидВажности.Обычная;

	НоваяСтр.Дата =ТекущаяДата();
	НоваяСтр.Категория = Справочники.Категории.НеОпределена;
	
	ДокСсылка.РеальныйИсполнитель = Исполнитель;
	Если РеальныеИсполнители Тогда
		ДокСсылка.ТекущийИсполнитель = Справочники.ФизическиеЛица.НайтиПоКоду("000000001");;
	Иначе
		ДокСсылка.ТекущийИсполнитель = Исполнитель;
	КонецЕсли;
	
	
	ДокСсылка.ДатаНачалаПлан =ДатаС; 
	ДокСсылка.ДатаОкончанияПлан =ДатаПо; 
	ДокСсылка.ОбращениеОт = Справочники.Контрагенты.ПустаяСсылка();

		НоваяСтрока = ДокСсылка.ДетализированыйПланВыполнения.Добавить();
		НоваяСтрока.ДатаНачала = ДатаС;
		НоваяСтрока.ДатаОкончания = ДатаПо;
		НоваяСтрока = ДокСсылка.РеальныйПланВыполнения.Добавить();
		НоваяСтрока.ДатаНачала = ДатаС;
		НоваяСтрока.ДатаОкончания = ДатаПо;

КонецПроцедуры

&НаСервере
Функция ПоменятьЗадачу(Задача,ДатаС,ДатаПо,ТекстЗадачи,Исполнитель,НомерПериода)
	
	Обновить = Ложь;
	
	//Часть для определения необходимости обновления планировщика
	НоваяЗадача = Задача = Неопределено;
	Если НоваяЗадача Тогда
		ПредИсполнитель = Исполнитель;
	Иначе
		Если РеальныеИсполнители Тогда
			ПредИсполнитель = Задача.РеальныйИсполнитель;
		Иначе
			ПредИсполнитель = Задача.ТекущийИсполнитель;
		КонецЕсли;
		
		Если НЕ ПредИсполнитель = Исполнитель Тогда
			Обновить = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//Выделяем истинный текст заголовка
	ПозицияПериода = Найти(ТекстЗадачи, "Период");
	Если ПозицияПериода Тогда
		ПозицияПериода = ?(СтрЧислоВхождений(ТекстЗадачи, Символы.ПС),ПозицияПериода-2,ПозицияПериода-1);
		Текст = Лев(ТекстЗадачи, ПозицияПериода);
	Иначе
		Текст = ТекстЗадачи; 
	КонецЕсли;
	
	Если Задача = Неопределено Тогда
		//НомерПериода = 1;
		//
		//ДокСсылка = Документы.ОбращениеВПоддержку.СоздатьДокумент();
		//ДокСсылка.Дата = ТекущаяДата();
		//НоваяСтр =	ДокСсылка.Исполнители.Добавить();
		//НоваяСтр.Исполнитель =  Исполнитель;  
		//
		//ДокСсылка.Автор  = ПараметрыСеанса.ТекущийПользователь.Сотрудник;
		//ДокСсылка.Важность = Перечисления.ВидВажности.Обычная;

		//НоваяСтр.Дата =ТекущаяДата();
		//НоваяСтр.Категория = Справочники.Категории.НеОпределена;
		//ДокСсылка.Описание = Текст;				
		//
		//ДокСсылка.РеальныйИсполнитель = Исполнитель;
		//Если РеальныеИсполнители Тогда
		//	ДокСсылка.ТекущийИсполнитель = Справочники.ФизическиеЛица.НайтиПоКоду("000000001");;
		//Иначе
		//	ДокСсылка.ТекущийИсполнитель = Исполнитель;
		//КонецЕсли;
		//
		//
		//	СтатусНовое = Справочники.Статусы.Новое;
		//	НоваяСтрока = ДокСсылка.Статусы.Добавить();
		//	НоваяСтрока.Дата = ТекущаяДата();
		//	НоваяСтрока.Статус = СтатусНовое;
		//	НоваяСтрока.Добавил = ПараметрыСеанса.ТекущийПользователь.Сотрудник;
		//	ДокСсылка.ТекущийСтатус = СтатусНовое;
		//	
		//
		//ДокСсылка.Заголовок = Текст;
		//ДокСсылка.ДатаНачалаПлан =ДатаС; 
		//ДокСсылка.ДатаОкончанияПлан =ДатаПо; 

		//	НоваяСтрока = ДокСсылка.ДетализированыйПланВыполнения.Добавить();
		//	НоваяСтрока.ДатаНачала = ДатаС;
		//	НоваяСтрока.ДатаОкончания = ДатаПо;
		//	
		//ДокСсылка.Записать(РежимЗаписиДокумента.Запись);
		//Задача = ДокСсылка.Ссылка;
			
	Иначе
		ДокСсылка = Задача.ПолучитьОбъект();
		
		Если НЕ ДокСсылка.Заголовок = Текст Тогда
			ДокСсылка.Заголовок = Текст;
			Обновить = Истина;
		КонецЕсли;
		
		Если РеальныеИсполнители Тогда
			ДокСсылка.РеальныйИсполнитель = Исполнитель;
		Иначе
			Если ДокСсылка.ТекущийИсполнитель = ДокСсылка.РеальныйИсполнитель Тогда
				ДокСсылка.РеальныйИсполнитель = Исполнитель;
			КонецЕсли;
			
			ДокСсылка.ТекущийИсполнитель = Исполнитель;
		КонецЕсли;
		
		ИмяТабЧасти = ?(РеальныеИсполнители, "РеальныйПланВыполнения", "ДетализированыйПланВыполнения");
		СтрокаПериода = ДокСсылка[ИмяТабЧасти][НомерПериода-1];
		СтрокаПериода.ДатаНачала =ДатаС; 
		СтрокаПериода.ДатаОкончания =ДатаПо; 
		
		ПланированиеЗадач.ИзменитьДетальноеПланированиеПриИзмененииТаблицы(ДокСсылка);
		
		Попытка
			ДокСсылка.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Обновить = Истина;
		КонецПопытки;

	КонецЕсли;
	
	Задача =ДокСсылка.ссылка; 	
	
	Возврат Обновить;
	
КонецФункции	

&НаКлиенте
Процедура ПланировщикПериодНазад(Команда)
	// Вставить содержимое обработчика.
	ПланировщикПериодС  = ПланировщикПериодС - (7 * 24*3600);
	ПланировщикПериодПо = ПланировщикПериодПо - (7 * 24*3600);
	НастроитьПланировщик() ;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПериодВперед(Команда)
	// Вставить содержимое обработчика.
	ПланировщикПериодС  = ПланировщикПериодС + (7 * 24*3600);
	ПланировщикПериодПо = ПланировщикПериодПо + (7 * 24*3600);
	НастроитьПланировщик();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика
	 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ  разрешенные
		|	ЦветаОтделов.Отдел,
		|	ЦветаОтделов.Цвет
		|ИЗ
		|	РегистрСведений.ЦветаОтделов КАК ЦветаОтделов";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	 а=1;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	 Кмд = ЭтаФорма.Команды.Добавить("ЦветаОтделов"+а);
     Кмд.Действие = "Тест";
     Кмд.Заголовок = ВыборкаДетальныеЗаписи.Отдел;
 
     //Добавляем саму кнопку
     Элемент = ЭтаФорма.Элементы.Добавить("ЦветаОтделов"+а, Тип("КнопкаФормы"), ЭтаФорма.Элементы.ГруппаЛегенда);
     Элемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
     Элемент.ИмяКоманды = "ЦветаОтделов"+а; 
	 Элемент.ЦветФона = WebЦвета[ВыборкаДетальныеЗаписи.цвет];
	 //Элемент.Родитель = ЭтаФорма.Элементы.ГруппаЛегенда;
	 а=а+1;
	КонецЦикла;
	Если РольДоступна("ИнтерактивноеОткрытиеВнешнихОтчетов") Тогда 
		 РеальныеИсполнители=Истина;
	КонецЕсли;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Если РольДоступна("ПолныеПрава") Тогда 
		Элементы.РеальныеИсполнители.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПериодВпередДень(Команда)
	// Вставить содержимое обработчика.
		// Вставить содержимое обработчика.
	ПланировщикПериодС  = ПланировщикПериодС+24*3600;
	ПланировщикПериодПо = ПланировщикПериодПо+24*3600;
	НастроитьПланировщик() ;

КонецПроцедуры

&НаСервере
Функция  ЕстьЛиПравоМенятьПланировщик()

Возврат 	РольДоступна("ИсполнениеОбращений") ИЛИ РольДоступна("ПолныеПрава");
	
	
КонецФункции	

&НаКлиенте
Процедура ПланировщикПериодНазадДень(Команда)
	// Вставить содержимое обработчика.  	ПланировщикПериодС  = ПланировщикПериодС+24*3600;
	ПланировщикПериодС  = ПланировщикПериодС-24*3600;
	ПланировщикПериодПо = ПланировщикПериодПо-24*3600;
	НастроитьПланировщик() ;

КонецПроцедуры

&НаКлиенте
Процедура ПланировщикРежимОтображенияПриИзменении(Элемент)
	Если ПланировщикРежимОтображения = "Месяц" Тогда
		ПланировщикПериодПо = (ПланировщикПериодС + 30*24*3600)-1;
	ИначеЕсли ПланировщикРежимОтображения = "Неделя" Тогда
		ПланировщикПериодПо = (ПланировщикПериодС + 14*24*3600)-1;
	ИначеЕсли ПланировщикРежимОтображения = "Два дня" Тогда
		ПланировщикПериодПо = (ПланировщикПериодС + 2*24*3600)-1;
	ИначеЕсли ПланировщикРежимОтображения = "День" Тогда
		ПланировщикПериодПо = (ПланировщикПериодС + 1*24*3600)-1;
	КонецЕсли;
	
	НастроитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура РеальныеИсполнителиПриИзменении(Элемент)
	НастроитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	СсылкаНаДок = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	
	Ключ = Новый Структура("Ключ", СсылкаНаДок);
	Оповещение = Новый ОписаниеОповещения("ОбновитьПриЗавершенииРедактирования", ЭтотОбъект); 
	форма = ОткрытьФорму("Документ.ОбращениеВПоддержку.Форма.ФормаДокумента", Ключ, Элемент,,,,Оповещение);    
	форма.Элементы.Страницы.ТекущаяСтраница = ?(РеальныеИсполнители, форма.Элементы.РеальныйПлан, форма.Элементы.ДетализированыйПлан);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПриЗавершенииРедактирования(Ответ, Параметры) Экспорт
	НастроитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	Если НЕ Элемент.ВыделенныеЭлементы.Количество() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Конец - Начало = 7200 Тогда
			Возврат;
		КонецЕсли;
		
		Исполнитель = Значения.Получить("Ресурсы");
		
		Оповещение = Новый ОписаниеОповещения("ОбновитьПриЗавершенииРедактирования", ЭтотОбъект); 
		форма = ОткрытьФорму("Документ.ОбращениеВПоддержку.Форма.ФормаВводаНового",, Элемент,,,,Оповещение);    

		ДанныеФормы = Форма.Объект;
		ЗаполнитьНаСервере(ДанныеФормы,Начало,Конец,Исполнитель);
		КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() Тогда
		
		ЭлементПланировщика = Элементы.Планировщик.ВыделенныеЭлементы[0];
		СсылкаНаЗадачу = ЭлементПланировщика.Значение;
		НомерПериода = ЭлементПланировщика.ЗначенияИзмерений.Получить("НомерПериода"); 
		
		Если ЭлементПланировщика.Значение = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если НомерПериода = Неопределено Тогда
			Позиция = Найти(ЭлементПланировщика.Текст, "Период - ");
			Если Позиция Тогда
				ПериодТекст = Сред(ЭлементПланировщика.Текст, Позиция);
				Позиция = Найти(ПериодТекст, "- ");
				НомерПериода = Число(Сред(ПериодТекст,Позиция+2));
			Иначе
				НомерПериода = 1; 
			КонецЕсли;
		КонецЕсли;
		
		УдалитьДокумент = Ложь;
		Если ПолучитьколичествоПериодовЗадачи(СсылкаНаЗадачу) = 1 Тогда
			ТекстВопроса = "Уверены что хотите удалить документ?";
			УдалитьДокумент = Истина;
		Иначе
			ТекстВопроса = "Уверены что хотите период документа?";
		КонецЕсли;
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		УдалитьПериод_Документ(СсылкаНаЗадачу, НомерПериода, УдалитьДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьколичествоПериодовЗадачи(Задача)
	Возврат Задача.ДетализированыйПланВыполнения.Количество(); 
КонецФункции
	
&НаСервере
Процедура УдалитьПериод_Документ(Задача, НомерПериода, УдалитьДокумент)
	Попытка
		ИмяТабЧасти = ?(РеальныеИсполнители, "РеальныйПланВыполнения", "ДетализированыйПланВыполнения");
		ДокСсылка = Задача.ПолучитьОбъект();
		
		Если УдалитьДокумент Тогда 
			ДокСсылка.УстановитьПометкуУдаления(Истина);
		Иначе
			ДокСсылка[ИмяТабЧасти].Удалить(НомерПериода-1);
			ДокСсылка.Записать();
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры
