#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	//TODO: Удалить старый алгоритм проведения после полного перехода на новый вариант
	УдалитьДвижения();
	
	Если НЕ Отказ Тогда
		ЗаписатьВРегистрСтатусыОбращений();
		ЗаписатьВРегистрКатегорииИсполнители()
	КонецЕсли;

	СформироватьДвиженияПоЗадолженостям();
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.ОбращениеВПоддержку.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СебестоимостьСервер.ОтразитьСебестоимость(ДополнительныеСвойства, Движения, Отказ);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
КонецПроцедуры

Процедура УдалитьДвижения()
	Для Каждого ТаблицаДвижений из Движения Цикл
		ТаблицаДвижений.Очистить();
		ТаблицаДвижений.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьДвиженияПоЗадолженостям()
	Движение = Движения.ЗадолженостьКлиентов.Добавить();
	Движение.Регистратор= Ссылка;
	Движение.Период 	= Дата;
	Движение.ВидДвижения= ВидДвиженияНакопления.Приход;
	Движение.Задача		= Ссылка;
	Движение.Отделение	= ОбращениеОт;
	Движение.Сумма		= СтоимостьРабот;

	Движение = Движения.РасчетСИсполнителями.Добавить();
	Движение.Регистратор= Ссылка;
	Движение.Период 	= Дата;
	Движение.ВидДвижения= ВидДвиженияНакопления.Приход;
	Движение.Задача		= Ссылка;
	Движение.Отделение	= ОбращениеОт;
	Движение.Исполнитель= РеальныйИсполнитель;
	Движение.Сумма		= Себестоимость;
	
	Если Оплачено Тогда
		Движение = Движения.ЗадолженостьКлиентов.Добавить();
		Движение.Регистратор= Ссылка;
		Движение.Период 	= Дата;
		Движение.ВидДвижения= ВидДвиженияНакопления.Расход;
		Движение.Задача		= Ссылка;
		Движение.Отделение	= ОбращениеОт;
		Движение.Сумма		= СтоимостьРабот;
	КонецЕсли;
	
	Если ОплаченоПрограммисту Тогда
		Движение = Движения.РасчетСИсполнителями.Добавить();
		Движение.Регистратор= Ссылка;
		Движение.Период 	= Дата;
		Движение.ВидДвижения= ВидДвиженияНакопления.Расход;
		Движение.Задача		= Ссылка;
		Движение.Отделение	= ОбращениеОт;
		Движение.Исполнитель= РеальныйИсполнитель;
		Движение.Сумма		= Себестоимость;
	КонецЕсли;
	
	Движения.ЗадолженостьКлиентов.Записать();
	Движения.РасчетСИсполнителями.Записать();
КонецПроцедуры


Процедура ОбработкаУдаленияПроведения(Отказ)
	Если Не Отказ Тогда
		УдалитьИзРегистрСтатусыОбращений();
		УдалитьИзРегистрКатегорииИсполнители();
	КонецЕсли;
	УдалитьДвижения();
КонецПроцедуры

Процедура ЗаписатьВРегистрСтатусыОбращений()
	 	СтатусыОбращений = РегистрыСведений.СтатусыОбращений.СоздатьНаборЗаписей();
	    СтатусыОбращений.Отбор.Обращение.Установить(Ссылка);
		
		Для Каждого ТекСтрокаСтатусы Из Статусы Цикл
			НоваяСтрока = СтатусыОбращений.Добавить();
			НоваяСтрока.Период = ТекСтрокаСтатусы.Дата;
			НоваяСтрока.Обращение = Ссылка;
			НоваяСтрока.Статус = ТекСтрокаСтатусы.Статус;
			НоваяСтрока.ОбращениеОт = ОбращениеОт;
			НоваяСтрока.Заголовок = Заголовок;
		КонецЦикла;

		СтатусыОбращений.Записать();

КонецПроцедуры

Процедура УдалитьИзРегистрСтатусыОбращений()
	СтатусыОбращений = РегистрыСведений.СтатусыОбращений.СоздатьНаборЗаписей();
	СтатусыОбращений.Отбор.Обращение.Установить(Ссылка);

	//СтатусыОбращений.Очистить();
	СтатусыОбращений.Записать();
КонецПроцедуры

Процедура ЗаписатьВРегистрКатегорииИсполнители()
	 	КатегорииИсполнители = РегистрыСведений.КатегорииИсполнителиОбращений.СоздатьНаборЗаписей();
	    КатегорииИсполнители.Отбор.Обращение.Установить(Ссылка);
		
		Для Каждого ТекСтрокаИсполнители Из Исполнители Цикл
			НоваяСтрока = КатегорииИсполнители.Добавить();
			НоваяСтрока.Период = ТекСтрокаИсполнители.Дата;
			НоваяСтрока.Обращение = Ссылка;
			НоваяСтрока.Категория = ТекСтрокаИсполнители.Категория;
			НоваяСтрока.ИсполнительОтдел = ТекСтрокаИсполнители.Отдел;
			НоваяСтрока.Исполнитель = ТекСтрокаИсполнители.Исполнитель;
		КонецЦикла;
		
		КатегорииИсполнители.Записать();

КонецПроцедуры

Процедура УдалитьИзРегистрКатегорииИсполнители()
	КатегорииИсполнители = РегистрыСведений.КатегорииИсполнителиОбращений.СоздатьНаборЗаписей();
	КатегорииИсполнители.Отбор.Обращение.Установить(Ссылка);

	КатегорииИсполнители.Записать();
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ЭтоНовый() тогда
		ДополнительныеСвойства.Вставить("СтарыйСтатус", Справочники.Статусы.ПустаяСсылка());
		ДополнительныеСвойства.Вставить("СтарыйРеальныйИсполнитель", Справочники.ФизическиеЛица.ПустаяСсылка());
	Иначе
		ДополнительныеСвойства.Вставить("СтарыйСтатус", Ссылка.ТекущийСтатус);
		ДополнительныеСвойства.Вставить("СтарыйРеальныйИсполнитель", Ссылка.РеальныйИсполнитель);
	КонецЕсли;
	
	ПланированиеЗадач.ИзменитьДетальноеПланированиеПриИзмененииШапки(ЭтотОбъект, "ДетализированыйПланВыполнения", Истина);
	ПланированиеЗадач.ИзменитьДетальноеПланированиеПриИзмененииШапки(ЭтотОбъект, "РеальныйПланВыполнения", Истина, Ложь);
	Корректно = ПланированиеЗадач.ПроверитьКорректностьПериодизации(ЭтотОбъект,  "ДетализированыйПланВыполнения");
	Корректно = Корректно И ПланированиеЗадач.ПроверитьКорректностьПериодизации(ЭтотОбъект,  "РеальныйПланВыполнения");
	
	Если Не Корректно Тогда
		Сообщить("Не верный порядок периодизации планирования!");
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли

